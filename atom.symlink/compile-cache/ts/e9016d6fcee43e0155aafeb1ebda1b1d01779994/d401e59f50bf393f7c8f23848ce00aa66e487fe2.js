// Type definitions for jQuery 1.10.x / 2.0.x
// Project: http://jquery.com/
// Definitions by: Boris Yankov <https://github.com/borisyankov/>, Christian Hoffmeister <https://github.com/choffmeister>, Steve Fenton <https://github.com/Steve-Fenton>, Diullei Gomes <https://github.com/Diullei>, Tass Iliopoulos <https://github.com/tasoili>, Jason Swearingen <https://github.com/jasons-novaleaf>, Sean Hill <https://github.com/seanski>, Guus Goossens <https://github.com/Guuz>, Kelly Summerlin <https://github.com/ksummerlin>, Basarat Ali Syed <https://github.com/basarat>, Nicholas Wolverson <https://github.com/nwolverson>, Derek Cicerone <https://github.com/derekcicerone>, Andrew Gaspar <https://github.com/AndrewGaspar>, James Harrison Fisher <https://github.com/jameshfisher>, Seikichi Kondo <https://github.com/seikichi>, Benjamin Jackman <https://github.com/benjaminjackman>, Poul Sorensen <https://github.com/s093294>, Josh Strobl <https://github.com/JoshStrobl>, John Reilly <https://github.com/johnnyreilly/>, Dick van den Brink <https://github.com/DickvdBrink>
// Definitions: https://github.com/borisyankov/DefinitelyTyped
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"/Users/shannonbertucci/.dotfiles/atom.symlink/packages/atom-typescript/lib/typings/jquery/jquery.d.ts","sources":["/Users/shannonbertucci/.dotfiles/atom.symlink/packages/atom-typescript/lib/typings/jquery/jquery.d.ts"],"names":[],"mappings":"AAAA,6CAA6C;AAC7C,8BAA8B;AAC9B,g+BAAg+B;AACh+B,8DAA8D;AA6mGlC","sourcesContent":["// Type definitions for jQuery 1.10.x / 2.0.x\n// Project: http://jquery.com/\n// Definitions by: Boris Yankov <https://github.com/borisyankov/>, Christian Hoffmeister <https://github.com/choffmeister>, Steve Fenton <https://github.com/Steve-Fenton>, Diullei Gomes <https://github.com/Diullei>, Tass Iliopoulos <https://github.com/tasoili>, Jason Swearingen <https://github.com/jasons-novaleaf>, Sean Hill <https://github.com/seanski>, Guus Goossens <https://github.com/Guuz>, Kelly Summerlin <https://github.com/ksummerlin>, Basarat Ali Syed <https://github.com/basarat>, Nicholas Wolverson <https://github.com/nwolverson>, Derek Cicerone <https://github.com/derekcicerone>, Andrew Gaspar <https://github.com/AndrewGaspar>, James Harrison Fisher <https://github.com/jameshfisher>, Seikichi Kondo <https://github.com/seikichi>, Benjamin Jackman <https://github.com/benjaminjackman>, Poul Sorensen <https://github.com/s093294>, Josh Strobl <https://github.com/JoshStrobl>, John Reilly <https://github.com/johnnyreilly/>, Dick van den Brink <https://github.com/DickvdBrink>\n// Definitions: https://github.com/borisyankov/DefinitelyTyped\n\n/* *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/**\n * Interface for the AJAX setting that will configure the AJAX request\n */\ninterface JQueryAjaxSettings {\n    /**\n     * The content type sent in the request header that tells the server what kind of response it will accept in return. If the accepts setting needs modification, it is recommended to do so once in the $.ajaxSetup() method.\n     */\n    accepts?: any;\n    /**\n     * By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: \"jsonp\" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success/error/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done() or the deprecated jqXHR.success().\n     */\n    async?: boolean;\n    /**\n     * A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request.\n     */\n    beforeSend? (jqXHR: JQueryXHR, settings: JQueryAjaxSettings): any;\n    /**\n     * If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending \"_={timestamp}\" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET.\n     */\n    cache?: boolean;\n    /**\n     * A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (\"success\", \"notmodified\", \"error\", \"timeout\", \"abort\", or \"parsererror\"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event.\n     */\n    complete? (jqXHR: JQueryXHR, textStatus: string): any;\n    /**\n     * An object of string/regular-expression pairs that determine how jQuery will parse the response, given its content type. (version added: 1.5)\n     */\n    contents?: { [key: string]: any; };\n    //According to jQuery.ajax source code, ajax's option actually allows contentType to set to \"false\"\n    // https://github.com/borisyankov/DefinitelyTyped/issues/742\n    /**\n     * When sending data to the server, use this content type. Default is \"application/x-www-form-urlencoded; charset=UTF-8\", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding.\n     */\n    contentType?: any;\n    /**\n     * This object will be made the context of all Ajax-related callbacks. By default, the context is an object that represents the ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax).\n     */\n    context?: any;\n    /**\n     * An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response. (version added: 1.5)\n     */\n    converters?: { [key: string]: any; };\n    /**\n     * If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5)\n     */\n    crossDomain?: boolean;\n    /**\n     * Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below).\n     */\n    data?: any;\n    /**\n     * A function to be used to handle the raw response data of XMLHttpRequest.This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter.\n     */\n    dataFilter? (data: any, ty: any): any;\n    /**\n     * The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). \n     */\n    dataType?: string;\n    /**\n     * A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are \"timeout\", \"error\", \"abort\", and \"parsererror\". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\" As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event.\n     */\n    error? (jqXHR: JQueryXHR, textStatus: string, errorThrown: string): any;\n    /**\n     * Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events.\n     */\n    global?: boolean;\n    /**\n     * An object of additional header key/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function. (version added: 1.5)\n     */\n    headers?: { [key: string]: any; };\n    /**\n     * Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data.\n     */\n    ifModified?: boolean;\n    /**\n     * Allow the current environment to be recognized as \"local,\" (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method. (version added: 1.5.1)\n     */\n    isLocal?: boolean;\n    /**\n     * Override the callback function name in a jsonp request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the \"?callback\" string to the URL or attempting to use \"=?\" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: \"callbackName\" }\n     */\n    jsonp?: any;\n    /**\n     * Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function.\n     */\n    jsonpCallback?: any;\n    /**\n     * A mime type to override the XHR mime type. (version added: 1.5.1)\n     */\n    mimeType?: string;\n    /**\n     * A password to be used with XMLHttpRequest in response to an HTTP access authentication request.\n     */\n    password?: string;\n    /**\n     * By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false.\n     */\n    processData?: boolean;\n    /**\n     * Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script.\n     */\n    scriptCharset?: string;\n    /**\n     * An object of numeric HTTP codes and functions to be called when the response has the corresponding code. f the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback. (version added: 1.5)\n     */\n    statusCode?: { [key: string]: any; };\n    /**\n     * A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event.\n     */\n    success? (data: any, textStatus: string, jqXHR: JQueryXHR): any;\n    /**\n     * Set a timeout (in milliseconds) for the request. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period.\n     */\n    timeout?: number;\n    /**\n     * Set this to true if you wish to use the traditional style of param serialization.\n     */\n    traditional?: boolean;\n    /**\n     * The type of request to make (\"POST\" or \"GET\"), default is \"GET\". Note: Other HTTP request methods, such as PUT and DELETE, can also be used here, but they are not supported by all browsers.\n     */\n    type?: string;\n    /**\n     * A string containing the URL to which the request is sent.\n     */\n    url?: string;\n    /**\n     * A username to be used with XMLHttpRequest in response to an HTTP access authentication request.\n     */\n    username?: string;\n    /**\n     * Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory.\n     */\n    xhr?: any;\n    /**\n     * An object of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed. In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it. (version added: 1.5.1)\n     */\n    xhrFields?: { [key: string]: any; };\n}\n\n/**\n * Interface for the jqXHR object\n */\ninterface JQueryXHR extends XMLHttpRequest, JQueryPromise<any> {\n    /**\n     * The .overrideMimeType() method may be used in the beforeSend() callback function, for example, to modify the response content-type header. As of jQuery 1.5.1, the jqXHR object also contains the overrideMimeType() method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). \n     */\n    overrideMimeType(mimeType: string): any;\n    /**\n     * Cancel the request. \n     *\n     * @param statusText A string passed as the textStatus parameter for the done callback. Default value: \"canceled\"\n     */\n    abort(statusText?: string): void;\n    /**\n     * Incorporates the functionality of the .done() and .fail() methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to deferred.then() for implementation details.\n     */\n    then(doneCallback: (data: any, textStatus: string, jqXHR: JQueryXHR) => void, failCallback?: (jqXHR: JQueryXHR, textStatus: string, errorThrown: any) => void): JQueryPromise<any>;\n    /**\n     * Property containing the parsed response if the response Content-Type is json\n     */\n    responseJSON?: any;\n}\n\n/**\n * Interface for the JQuery callback\n */\ninterface JQueryCallback {\n    /**\n     * Add a callback or a collection of callbacks to a callback list.\n     * \n     * @param callbacks A function, or array of functions, that are to be added to the callback list.\n     */\n    add(callbacks: Function): JQueryCallback;\n    /**\n     * Add a callback or a collection of callbacks to a callback list.\n     * \n     * @param callbacks A function, or array of functions, that are to be added to the callback list.\n     */\n    add(callbacks: Function[]): JQueryCallback;\n\n    /**\n     * Disable a callback list from doing anything more.\n     */\n    disable(): JQueryCallback;\n\n    /**\n     * Determine if the callbacks list has been disabled.\n     */\n    disabled(): boolean;\n\n    /**\n     * Remove all of the callbacks from a list.\n     */\n    empty(): JQueryCallback;\n\n    /**\n     * Call all of the callbacks with the given arguments\n     * \n     * @param arguments The argument or list of arguments to pass back to the callback list.\n     */\n    fire(...arguments: any[]): JQueryCallback;\n\n    /**\n     * Determine if the callbacks have already been called at least once.\n     */\n    fired(): boolean;\n\n    /**\n     * Call all callbacks in a list with the given context and arguments.\n     * \n     * @param context A reference to the context in which the callbacks in the list should be fired.\n     * @param arguments An argument, or array of arguments, to pass to the callbacks in the list.\n     */\n    fireWith(context?: any, ...args: any[]): JQueryCallback;\n\n    /**\n     * Determine whether a supplied callback is in a list\n     * \n     * @param callback The callback to search for.\n     */\n    has(callback: Function): boolean;\n\n    /**\n     * Lock a callback list in its current state.\n     */\n    lock(): JQueryCallback;\n\n    /**\n     * Determine if the callbacks list has been locked.\n     */\n    locked(): boolean;\n\n    /**\n     * Remove a callback or a collection of callbacks from a callback list.\n     * \n     * @param callbacks A function, or array of functions, that are to be removed from the callback list.\n     */\n    remove(callbacks: Function): JQueryCallback;\n    /**\n     * Remove a callback or a collection of callbacks from a callback list.\n     * \n     * @param callbacks A function, or array of functions, that are to be removed from the callback list.\n     */\n    remove(callbacks: Function[]): JQueryCallback;\n}\n\n/**\n * Allows jQuery Promises to interop with non-jQuery promises\n */\ninterface JQueryGenericPromise<T> {\n    /**\n     * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.\n     * \n     * @param doneFilter A function that is called when the Deferred is resolved.\n     * @param failFilter An optional function that is called when the Deferred is rejected.\n     */\n    then<U>(doneFilter: (value: T) => U|JQueryGenericPromise<U>, failFilter?: (reason: any) => U|JQueryGenericPromise<U>): JQueryGenericPromise<U>;\n}\n\n/**\n * Interface for the JQuery promise/deferred callbacks\n */\ninterface JQueryPromiseCallback<T> {\n    (value?: T, ...args: any[]): void;\n}\n\ninterface JQueryPromiseOperator<T, R> {\n    (callback: JQueryPromiseCallback<T>, ...callbacks: JQueryPromiseCallback<T>[]): JQueryPromise<R>;\n    (callback: JQueryPromiseCallback<T>[], ...callbacks: JQueryPromiseCallback<T>[]): JQueryPromise<R>;\n}\n\n/**\n * Interface for the JQuery promise, part of callbacks\n */\ninterface JQueryPromise<T> {\n    /**\n     * Add handlers to be called when the Deferred object is either resolved or rejected.\n     * \n     * @param alwaysCallbacks1 A function, or array of functions, that is called when the Deferred is resolved or rejected.\n     * @param alwaysCallbacks2 Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected.\n     */\n    always: JQueryPromiseOperator<any, T>;\n    /**\n     * Add handlers to be called when the Deferred object is resolved.\n     * \n     * @param doneCallbacks1 A function, or array of functions, that are called when the Deferred is resolved.\n     * @param doneCallbacks2 Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.\n     */\n    done: JQueryPromiseOperator<T, T>;\n    /**\n     * Add handlers to be called when the Deferred object is rejected.\n     * \n     * @param failCallbacks1 A function, or array of functions, that are called when the Deferred is rejected.\n     * @param failCallbacks2 Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.\n     */\n    fail: JQueryPromiseOperator<any, T>;\n    /**\n     * Add handlers to be called when the Deferred object generates progress notifications.\n     * \n     * @param progressCallbacks A function, or array of functions, to be called when the Deferred generates progress notifications.\n     */\n    progress(progressCallback: JQueryPromiseCallback<T>): JQueryPromise<T>;\n    progress(progressCallbacks: JQueryPromiseCallback<T>[]): JQueryPromise<T>;\n\n    /**\n     * Determine the current state of a Deferred object.\n     */\n    state(): string;\n\n    // Deprecated - given no typings\n    pipe(doneFilter?: (x: any) => any, failFilter?: (x: any) => any, progressFilter?: (x: any) => any): JQueryPromise<any>;\n\n    /**\n     * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.\n     * \n     * @param doneFilter A function that is called when the Deferred is resolved.\n     * @param failFilter An optional function that is called when the Deferred is rejected.\n     * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n     */\n    then<U>(doneFilter: (value: T) => U|JQueryGenericPromise<U>, failFilter?: (...reasons: any[]) => U|JQueryGenericPromise<U>, progressFilter?: (...progression: any[]) => any): JQueryPromise<U>;\n\n    // Because JQuery Promises Suck\n    /**\n     * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.\n     * \n     * @param doneFilter A function that is called when the Deferred is resolved.\n     * @param failFilter An optional function that is called when the Deferred is rejected.\n     * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.\n     */\n    then<U>(doneFilter: (...values: any[]) => U|JQueryGenericPromise<U>, failFilter?: (...reasons: any[]) => U|JQueryGenericPromise<U>, progressFilter?: (...progression: any[]) => any): JQueryPromise<U>;\n}\n\n/**\n * Interface for the JQuery deferred, part of callbacks\n */\ninterface JQueryDeferred<T> extends JQueryPromise<T> {\n    /**\n     * Add handlers to be called when the Deferred object is either resolved or rejected.\n     * \n     * @param alwaysCallbacks1 A function, or array of functions, that is called when the Deferred is resolved or rejected.\n     * @param alwaysCallbacks2 Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected.\n     */\n    always(alwaysCallbacks1?: JQueryPromiseCallback<T>, ...alwaysCallbacks2: JQueryPromiseCallback<T>[]): JQueryDeferred<T>;\n    always(alwaysCallbacks1?: JQueryPromiseCallback<T>[], ...alwaysCallbacks2: JQueryPromiseCallback<T>[]): JQueryDeferred<T>;\n    always(alwaysCallbacks1?: JQueryPromiseCallback<T>, ...alwaysCallbacks2: any[]): JQueryDeferred<T>;\n    always(alwaysCallbacks1?: JQueryPromiseCallback<T>[], ...alwaysCallbacks2: any[]): JQueryDeferred<T>;\n    /**\n     * Add handlers to be called when the Deferred object is resolved.\n     * \n     * @param doneCallbacks1 A function, or array of functions, that are called when the Deferred is resolved.\n     * @param doneCallbacks2 Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.\n     */\n    done(doneCallbacks1?: JQueryPromiseCallback<T>, ...doneCallbacks2: JQueryPromiseCallback<T>[]): JQueryDeferred<T>;\n    done(doneCallbacks1?: JQueryPromiseCallback<T>[], ...doneCallbacks2: JQueryPromiseCallback<T>[]): JQueryDeferred<T>;\n    done(doneCallbacks1?: JQueryPromiseCallback<T>, ...doneCallbacks2: any[]): JQueryDeferred<T>;\n    done(doneCallbacks1?: JQueryPromiseCallback<T>[], ...doneCallbacks2: any[]): JQueryDeferred<T>;\n    /**\n     * Add handlers to be called when the Deferred object is rejected.\n     * \n     * @param failCallbacks1 A function, or array of functions, that are called when the Deferred is rejected.\n     * @param failCallbacks2 Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.\n     */\n    fail(failCallbacks1?: JQueryPromiseCallback<T>, ...failCallbacks2: JQueryPromiseCallback<T>[]): JQueryDeferred<T>;\n    fail(failCallbacks1?: JQueryPromiseCallback<T>[], ...failCallbacks2: JQueryPromiseCallback<T>[]): JQueryDeferred<T>;\n    fail(failCallbacks1?: JQueryPromiseCallback<T>, ...failCallbacks2: any[]): JQueryDeferred<T>;\n    fail(failCallbacks1?: JQueryPromiseCallback<T>[], ...failCallbacks2: any[]): JQueryDeferred<T>;\n    /**\n     * Add handlers to be called when the Deferred object generates progress notifications.\n     * \n     * @param progressCallbacks A function, or array of functions, to be called when the Deferred generates progress notifications.\n     */\n    progress(progressCallback: JQueryPromiseCallback<T>): JQueryDeferred<T>;\n    progress(progressCallbacks: JQueryPromiseCallback<T>[]): JQueryDeferred<T>;\n\n    /**\n     * Call the progressCallbacks on a Deferred object with the given args.\n     * \n     * @param args Optional arguments that are passed to the progressCallbacks.\n     */\n    notify(...args: any[]): JQueryDeferred<T>;\n\n    /**\n     * Call the progressCallbacks on a Deferred object with the given context and args.\n     * \n     * @param context Context passed to the progressCallbacks as the this object.\n     * @param args Optional arguments that are passed to the progressCallbacks.\n     */\n    notifyWith(context: any, ...args: any[]): JQueryDeferred<T>;\n\n    /**\n     * Reject a Deferred object and call any failCallbacks with the given args.\n     * \n     * @param args Optional arguments that are passed to the failCallbacks.\n     */\n    reject(...args: any[]): JQueryDeferred<T>;\n    /**\n     * Reject a Deferred object and call any failCallbacks with the given context and args.\n     * \n     * @param context Context passed to the failCallbacks as the this object.\n     * @param args An optional array of arguments that are passed to the failCallbacks.\n     */\n    rejectWith(context: any, ...args: any[]): JQueryDeferred<T>;\n\n    /**\n     * Resolve a Deferred object and call any doneCallbacks with the given args.\n     * \n     * @param value First argument passed to doneCallbacks.\n     * @param args Optional subsequent arguments that are passed to the doneCallbacks.\n     */\n    resolve(value?: T, ...args: any[]): JQueryDeferred<T>;\n\n    /**\n     * Resolve a Deferred object and call any doneCallbacks with the given context and args.\n     * \n     * @param context Context passed to the doneCallbacks as the this object.\n     * @param args An optional array of arguments that are passed to the doneCallbacks.\n     */\n    resolveWith(context: any, ...args: any[]): JQueryDeferred<T>;\n\n    /**\n     * Return a Deferred's Promise object.\n     * \n     * @param target Object onto which the promise methods have to be attached\n     */\n    promise(target?: any): JQueryPromise<T>;\n}\n\n/**\n * Interface of the JQuery extension of the W3C event object\n */\ninterface BaseJQueryEventObject extends Event {\n    data: any;\n    delegateTarget: Element;\n    isDefaultPrevented(): boolean;\n    isImmediatePropagationStopped(): boolean;\n    isPropagationStopped(): boolean;\n    namespace: string;\n    originalEvent: Event;\n    preventDefault(): any;\n    relatedTarget: Element;\n    result: any;\n    stopImmediatePropagation(): void;\n    stopPropagation(): void;\n    target: Element;\n    pageX: number;\n    pageY: number;\n    which: number;\n    metaKey: boolean;\n}\n\ninterface JQueryInputEventObject extends BaseJQueryEventObject {\n    altKey: boolean;\n    ctrlKey: boolean;\n    metaKey: boolean;\n    shiftKey: boolean;\n}\n\ninterface JQueryMouseEventObject extends JQueryInputEventObject {\n    button: number;\n    clientX: number;\n    clientY: number;\n    offsetX: number;\n    offsetY: number;\n    pageX: number;\n    pageY: number;\n    screenX: number;\n    screenY: number;\n}\n\ninterface JQueryKeyEventObject extends JQueryInputEventObject {\n    char: any;\n    charCode: number;\n    key: any;\n    keyCode: number;\n}\n\ninterface JQueryEventObject extends BaseJQueryEventObject, JQueryInputEventObject, JQueryMouseEventObject, JQueryKeyEventObject{\n}\n\n/*\n    Collection of properties of the current browser\n*/\n\ninterface JQuerySupport {\n    ajax?: boolean;\n    boxModel?: boolean;\n    changeBubbles?: boolean;\n    checkClone?: boolean;\n    checkOn?: boolean;\n    cors?: boolean;\n    cssFloat?: boolean;\n    hrefNormalized?: boolean;\n    htmlSerialize?: boolean;\n    leadingWhitespace?: boolean;\n    noCloneChecked?: boolean;\n    noCloneEvent?: boolean;\n    opacity?: boolean;\n    optDisabled?: boolean;\n    optSelected?: boolean;\n    scriptEval? (): boolean;\n    style?: boolean;\n    submitBubbles?: boolean;\n    tbody?: boolean;\n}\n\ninterface JQueryParam {\n    /**\n     * Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request.\n     * \n     * @param obj An array or object to serialize.\n     */\n    (obj: any): string;\n\n    /**\n     * Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request.\n     * \n     * @param obj An array or object to serialize.\n     * @param traditional A Boolean indicating whether to perform a traditional \"shallow\" serialization.\n     */\n    (obj: any, traditional: boolean): string;\n}\n\n/**\n * The interface used to construct jQuery events (with $.Event). It is\n * defined separately instead of inline in JQueryStatic to allow\n * overriding the construction function with specific strings\n * returning specific event objects.\n */\ninterface JQueryEventConstructor {\n    (name: string, eventProperties?: any): JQueryEventObject;\n    new (name: string, eventProperties?: any): JQueryEventObject;\n}\n\n/**\n * The interface used to specify coordinates.\n */\ninterface JQueryCoordinates {\n    left: number;\n    top: number;\n}\n\n/**\n * Elements in the array returned by serializeArray()\n */\ninterface JQuerySerializeArrayElement {\n    name: string;\n    value: string;\n}\n\ninterface JQueryAnimationOptions { \n    /**\n     * A string or number determining how long the animation will run.\n     */\n    duration?: any; \n    /**\n     * A string indicating which easing function to use for the transition.\n     */\n    easing?: string; \n    /**\n     * A function to call once the animation is complete.\n     */\n    complete?: Function; \n    /**\n     * A function to be called for each animated property of each animated element. This function provides an opportunity to modify the Tween object to change the value of the property before it is set.\n     */\n    step?: (now: number, tween: any) => any; \n    /**\n     * A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)\n     */\n    progress?: (animation: JQueryPromise<any>, progress: number, remainingMs: number) => any; \n    /**\n     * A function to call when the animation begins. (version added: 1.8)\n     */\n    start?: (animation: JQueryPromise<any>) => any; \n    /**\n     * A function to be called when the animation completes (its Promise object is resolved). (version added: 1.8)\n     */\n    done?: (animation: JQueryPromise<any>, jumpedToEnd: boolean) => any; \n    /**\n     * A function to be called when the animation fails to complete (its Promise object is rejected). (version added: 1.8)\n     */\n    fail?: (animation: JQueryPromise<any>, jumpedToEnd: boolean) => any; \n    /**\n     * A function to be called when the animation completes or stops without completing (its Promise object is either resolved or rejected). (version added: 1.8)\n     */\n    always?: (animation: JQueryPromise<any>, jumpedToEnd: boolean) => any; \n    /**\n     * A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately. As of jQuery 1.7, the queue option can also accept a string, in which case the animation is added to the queue represented by that string. When a custom queue name is used the animation does not automatically start; you must call .dequeue(\"queuename\") to start it.\n     */\n    queue?: any; \n    /**\n     * A map of one or more of the CSS properties defined by the properties argument and their corresponding easing functions. (version added: 1.4)\n     */\n    specialEasing?: Object;\n}\n\n/**\n * Static members of jQuery (those on $ and jQuery themselves)\n */\ninterface JQueryStatic {\n\n    /**\n     * Perform an asynchronous HTTP (Ajax) request.\n     *\n     * @param settings A set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup().\n     */\n    ajax(settings: JQueryAjaxSettings): JQueryXHR;\n    /**\n     * Perform an asynchronous HTTP (Ajax) request.\n     *\n     * @param url A string containing the URL to which the request is sent.\n     * @param settings A set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup().\n     */\n    ajax(url: string, settings?: JQueryAjaxSettings): JQueryXHR;\n\n    /**\n     * Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().\n     *\n     * @param dataTypes An optional string containing one or more space-separated dataTypes\n     * @param handler A handler to set default values for future Ajax requests.\n     */\n    ajaxPrefilter(dataTypes: string, handler: (opts: any, originalOpts: JQueryAjaxSettings, jqXHR: JQueryXHR) => any): void;\n    /**\n     * Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().\n     *\n     * @param handler A handler to set default values for future Ajax requests.\n     */\n    ajaxPrefilter(handler: (opts: any, originalOpts: JQueryAjaxSettings, jqXHR: JQueryXHR) => any): void;\n\n    ajaxSettings: JQueryAjaxSettings;\n\n     /**\n      * Set default values for future Ajax requests. Its use is not recommended.\n      *\n      * @param options A set of key/value pairs that configure the default Ajax request. All options are optional.\n      */\n    ajaxSetup(options: JQueryAjaxSettings): void;\n\n    /**\n     * Load data from the server using a HTTP GET request.\n     *\n     * @param url A string containing the URL to which the request is sent.\n     * @param success A callback function that is executed if the request succeeds.\n     * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, or html).\n     */\n    get(url: string, success?: (data: any, textStatus: string, jqXHR: JQueryXHR) => any, dataType?: string): JQueryXHR;\n    /**\n     * Load data from the server using a HTTP GET request.\n     *\n     * @param url A string containing the URL to which the request is sent.\n     * @param data A plain object or string that is sent to the server with the request.\n     * @param success A callback function that is executed if the request succeeds.\n     * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, or html).\n     */\n    get(url: string, data?: Object|string, success?: (data: any, textStatus: string, jqXHR: JQueryXHR) => any, dataType?: string): JQueryXHR;\n    /**\n     * Load JSON-encoded data from the server using a GET HTTP request.\n     *\n     * @param url A string containing the URL to which the request is sent.\n     * @param success A callback function that is executed if the request succeeds.\n     */\n    getJSON(url: string, success?: (data: any, textStatus: string, jqXHR: JQueryXHR) => any): JQueryXHR;\n    /**\n     * Load JSON-encoded data from the server using a GET HTTP request.\n     *\n     * @param url A string containing the URL to which the request is sent.\n     * @param data A plain object or string that is sent to the server with the request.\n     * @param success A callback function that is executed if the request succeeds.\n     */\n    getJSON(url: string, data?: Object|string, success?: (data: any, textStatus: string, jqXHR: JQueryXHR) => any): JQueryXHR;\n    /**\n     * Load a JavaScript file from the server using a GET HTTP request, then execute it.\n     *\n     * @param url A string containing the URL to which the request is sent.\n     * @param success A callback function that is executed if the request succeeds.\n     */\n    getScript(url: string, success?: (script: string, textStatus: string, jqXHR: JQueryXHR) => any): JQueryXHR;\n\n    /**\n     * Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request.\n     */\n    param: JQueryParam;\n\n    /**\n     * Load data from the server using a HTTP POST request.\n     *\n     * @param url A string containing the URL to which the request is sent.\n     * @param success A callback function that is executed if the request succeeds. Required if dataType is provided, but can be null in that case.\n     * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).\n     */\n    post(url: string, success?: (data: any, textStatus: string, jqXHR: JQueryXHR) => any, dataType?: string): JQueryXHR;\n    /**\n     * Load data from the server using a HTTP POST request.\n     *\n     * @param url A string containing the URL to which the request is sent.\n     * @param data A plain object or string that is sent to the server with the request.\n     * @param success A callback function that is executed if the request succeeds. Required if dataType is provided, but can be null in that case.\n     * @param dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).\n     */\n    post(url: string, data?: Object|string, success?: (data: any, textStatus: string, jqXHR: JQueryXHR) => any, dataType?: string): JQueryXHR;\n\n    /**\n     * A multi-purpose callbacks list object that provides a powerful way to manage callback lists.\n     *\n     * @param flags An optional list of space-separated flags that change how the callback list behaves.\n     */\n    Callbacks(flags?: string): JQueryCallback;\n\n    /**\n     * Holds or releases the execution of jQuery's ready event.\n     *\n     * @param hold Indicates whether the ready hold is being requested or released\n     */\n    holdReady(hold: boolean): void;\n\n    /**\n     * Accepts a string containing a CSS selector which is then used to match a set of elements.\n     *\n     * @param selector A string containing a selector expression\n     * @param context A DOM Element, Document, or jQuery to use as context\n     */\n    (selector: string, context?: Element|JQuery): JQuery;\n    /**\n     * Accepts a string containing a CSS selector which is then used to match a set of elements.\n     *\n     * @param element A DOM element to wrap in a jQuery object.\n     */\n    (element: Element): JQuery;\n    /**\n     * Accepts a string containing a CSS selector which is then used to match a set of elements.\n     *\n     * @param elementArray An array containing a set of DOM elements to wrap in a jQuery object.\n     */\n    (elementArray: Element[]): JQuery;\n    /**\n     * Accepts a string containing a CSS selector which is then used to match a set of elements.\n     *\n     * @param object A plain object to wrap in a jQuery object.\n     */\n    (object: {}): JQuery;\n    /**\n     * Accepts a string containing a CSS selector which is then used to match a set of elements.\n     *\n     * @param object An existing jQuery object to clone.\n     */\n    (object: JQuery): JQuery;\n    /**\n     * Specify a function to execute when the DOM is fully loaded.\n     */\n    (): JQuery;\n\n    /**\n     * Creates DOM elements on the fly from the provided string of raw HTML.\n     *\n     * @param html A string of HTML to create on the fly. Note that this parses HTML, not XML.\n     * @param ownerDocument A document in which the new elements will be created.\n     */\n    (html: string, ownerDocument?: Document): JQuery;\n    /**\n     * Creates DOM elements on the fly from the provided string of raw HTML.\n     *\n     * @param html A string defining a single, standalone, HTML element (e.g. <div/> or <div></div>).\n     * @param attributes An object of attributes, events, and methods to call on the newly-created element.\n     */\n    (html: string, attributes: Object): JQuery;\n\n    /**\n     * Binds a function to be executed when the DOM has finished loading.\n     *\n     * @param callback A function to execute after the DOM is ready.\n     */\n    (callback: Function): JQuery;\n\n    /**\n     * Relinquish jQuery's control of the $ variable.\n     *\n     * @param removeAll A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).\n     */\n    noConflict(removeAll?: boolean): Object;\n\n    /**\n     * Provides a way to execute callback functions based on one or more objects, usually Deferred objects that represent asynchronous events.\n     *\n     * @param deferreds One or more Deferred objects, or plain JavaScript objects.\n     */\n    when<T>(...deferreds: JQueryGenericPromise<T>[]): JQueryPromise<T>;\n    /**\n     * Provides a way to execute callback functions based on one or more objects, usually Deferred objects that represent asynchronous events.\n     *\n     * @param deferreds One or more Deferred objects, or plain JavaScript objects.\n     */\n    when<T>(...deferreds: T[]): JQueryPromise<T>;\n    /**\n     * Provides a way to execute callback functions based on one or more objects, usually Deferred objects that represent asynchronous events.\n     *\n     * @param deferreds One or more Deferred objects, or plain JavaScript objects.\n     */\n    when<T>(...deferreds: any[]): JQueryPromise<T>;\n\n    /**\n     * Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.\n     */\n    cssHooks: { [key: string]: any; };\n    cssNumber: any;\n\n    /**\n     * Store arbitrary data associated with the specified element. Returns the value that was set.\n     *\n     * @param element The DOM element to associate with the data.\n     * @param key A string naming the piece of data to set.\n     * @param value The new data value.\n     */\n    data<T>(element: Element, key: string, value: T): T;\n    /**\n     * Returns value at named data store for the element, as set by jQuery.data(element, name, value), or the full data store for the element.\n     *\n     * @param element The DOM element to associate with the data.\n     * @param key A string naming the piece of data to set.\n     */\n    data(element: Element, key: string): any;\n    /**\n     * Returns value at named data store for the element, as set by jQuery.data(element, name, value), or the full data store for the element.\n     *\n     * @param element The DOM element to associate with the data.\n     */\n    data(element: Element): any;\n\n    /**\n     * Execute the next function on the queue for the matched element.\n     *\n     * @param element A DOM element from which to remove and execute a queued function.\n     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.\n     */\n    dequeue(element: Element, queueName?: string): void;\n\n    /**\n     * Determine whether an element has any jQuery data associated with it.\n     *\n     * @param element A DOM element to be checked for data.\n     */\n    hasData(element: Element): boolean;\n\n    /**\n     * Show the queue of functions to be executed on the matched element.\n     *\n     * @param element A DOM element to inspect for an attached queue.\n     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.\n     */\n    queue(element: Element, queueName?: string): any[];\n    /**\n     * Manipulate the queue of functions to be executed on the matched element.\n     *\n     * @param element A DOM element where the array of queued functions is attached.\n     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.\n     * @param newQueue An array of functions to replace the current queue contents.\n     */\n    queue(element: Element, queueName: string, newQueue: Function[]): JQuery;\n    /**\n     * Manipulate the queue of functions to be executed on the matched element.\n     *\n     * @param element A DOM element on which to add a queued function.\n     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.\n     * @param callback The new function to add to the queue.\n     */\n    queue(element: Element, queueName: string, callback: Function): JQuery;\n\n    /**\n     * Remove a previously-stored piece of data.\n     *\n     * @param element A DOM element from which to remove data.\n     * @param name A string naming the piece of data to remove.\n     */\n    removeData(element: Element, name?: string): JQuery;\n\n    /**\n     * A constructor function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.\n     *\n     * @param beforeStart A function that is called just before the constructor returns.\n     */\n    Deferred<T>(beforeStart?: (deferred: JQueryDeferred<T>) => any): JQueryDeferred<T>;\n\n    /**\n     * Effects\n     */\n    fx: {\n        tick: () => void;\n        /**\n         * The rate (in milliseconds) at which animations fire.\n         */\n        interval: number;\n        stop: () => void;\n        speeds: { slow: number; fast: number; };\n        /**\n         * Globally disable all animations.\n         */\n        off: boolean;\n        step: any;\n    };\n\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     *\n     * @param fnction The function whose context will be changed.\n     * @param context The object to which the context (this) of the function should be set.\n     * @param additionalArguments Any number of arguments to be passed to the function referenced in the function argument.\n     */\n    proxy(fnction: (...args: any[]) => any, context: Object, ...additionalArguments: any[]): any;\n    /**\n     * Takes a function and returns a new one that will always have a particular context.\n     *\n     * @param context The object to which the context (this) of the function should be set.\n     * @param name The name of the function whose context will be changed (should be a property of the context object).\n     * @param additionalArguments Any number of arguments to be passed to the function named in the name argument.\n     */\n    proxy(context: Object, name: string, ...additionalArguments: any[]): any;\n\n    Event: JQueryEventConstructor;\n\n    /**\n     * Takes a string and throws an exception containing it.\n     *\n     * @param message The message to send out.\n     */\n    error(message: any): JQuery;\n\n    expr: any;\n    fn: any;  //TODO: Decide how we want to type this\n\n    isReady: boolean;\n\n    // Properties\n    support: JQuerySupport;\n\n    /**\n     * Check to see if a DOM element is a descendant of another DOM element.\n     * \n     * @param container The DOM element that may contain the other element.\n     * @param contained The DOM element that may be contained by (a descendant of) the other element.\n     */\n    contains(container: Element, contained: Element): boolean;\n\n    /**\n     * A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.\n     * \n     * @param collection The object or array to iterate over.\n     * @param callback The function that will be executed on every object.\n     */\n    each<T>(\n        collection: T[],\n        callback: (indexInArray: number, valueOfElement: T) => any\n        ): any;\n\n    /**\n     * A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.\n     * \n     * @param collection The object or array to iterate over.\n     * @param callback The function that will be executed on every object.\n     */\n    each(\n        collection: any,\n        callback: (indexInArray: any, valueOfElement: any) => any\n        ): any;\n\n    /**\n     * Merge the contents of two or more objects together into the first object.\n     *\n     * @param target An object that will receive the new properties if additional objects are passed in or that will extend the jQuery namespace if it is the sole argument.\n     * @param object1 An object containing additional properties to merge in.\n     * @param objectN Additional objects containing properties to merge in.\n     */\n    extend(target: any, object1?: any, ...objectN: any[]): any;\n    /**\n     * Merge the contents of two or more objects together into the first object.\n     *\n     * @param deep If true, the merge becomes recursive (aka. deep copy).\n     * @param target The object to extend. It will receive the new properties.\n     * @param object1 An object containing additional properties to merge in.\n     * @param objectN Additional objects containing properties to merge in.\n     */\n    extend(deep: boolean, target: any, object1?: any, ...objectN: any[]): any;\n\n    /**\n     * Execute some JavaScript code globally.\n     *\n     * @param code The JavaScript code to execute.\n     */\n    globalEval(code: string): any;\n\n    /**\n     * Finds the elements of an array which satisfy a filter function. The original array is not affected.\n     *\n     * @param array The array to search through.\n     * @param func The function to process each item against. The first argument to the function is the item, and the second argument is the index. The function should return a Boolean value.  this will be the global window object.\n     * @param invert If \"invert\" is false, or not provided, then the function returns an array consisting of all elements for which \"callback\" returns true. If \"invert\" is true, then the function returns an array consisting of all elements for which \"callback\" returns false.\n     */\n    grep<T>(array: T[], func: (elementOfArray: T, indexInArray: number) => boolean, invert?: boolean): T[];\n\n    /**\n     * Search for a specified value within an array and return its index (or -1 if not found).\n     *\n     * @param value The value to search for.\n     * @param array An array through which to search.\n     * @param fromIndex he index of the array at which to begin the search. The default is 0, which will search the whole array.\n     */\n    inArray<T>(value: T, array: T[], fromIndex?: number): number;\n\n    /**\n     * Determine whether the argument is an array.\n     *\n     * @param obj Object to test whether or not it is an array.\n     */\n    isArray(obj: any): boolean;\n    /**\n     * Check to see if an object is empty (contains no enumerable properties).\n     *\n     * @param obj The object that will be checked to see if it's empty.\n     */\n    isEmptyObject(obj: any): boolean;\n    /**\n     * Determine if the argument passed is a Javascript function object.\n     *\n     * @param obj Object to test whether or not it is a function.\n     */\n    isFunction(obj: any): boolean;\n    /**\n     * Determines whether its argument is a number.\n     *\n     * @param obj The value to be tested.\n     */\n    isNumeric(value: any): boolean;\n    /**\n     * Check to see if an object is a plain object (created using \"{}\" or \"new Object\").\n     *\n     * @param obj The object that will be checked to see if it's a plain object.\n     */\n    isPlainObject(obj: any): boolean;\n    /**\n     * Determine whether the argument is a window.\n     *\n     * @param obj Object to test whether or not it is a window.\n     */\n    isWindow(obj: any): boolean;\n    /**\n     * Check to see if a DOM node is within an XML document (or is an XML document).\n     *\n     * @param node he DOM node that will be checked to see if it's in an XML document.\n     */\n    isXMLDoc(node: Node): boolean;\n\n    /**\n     * Convert an array-like object into a true JavaScript array.\n     * \n     * @param obj Any object to turn into a native Array.\n     */\n    makeArray(obj: any): any[];\n\n    /**\n     * Translate all items in an array or object to new array of items.\n     * \n     * @param array The Array to translate.\n     * @param callback The function to process each item against. The first argument to the function is the array item, the second argument is the index in array The function can return any value. Within the function, this refers to the global (window) object.\n     */\n    map<T, U>(array: T[], callback: (elementOfArray: T, indexInArray: number) => U): U[];\n    /**\n     * Translate all items in an array or object to new array of items.\n     * \n     * @param arrayOrObject The Array or Object to translate.\n     * @param callback The function to process each item against. The first argument to the function is the value; the second argument is the index or key of the array or object property. The function can return any value to add to the array. A returned array will be flattened into the resulting array. Within the function, this refers to the global (window) object.\n     */\n    map(arrayOrObject: any, callback: (value: any, indexOrKey: any) => any): any;\n\n    /**\n     * Merge the contents of two arrays together into the first array.\n     * \n     * @param first The first array to merge, the elements of second added.\n     * @param second The second array to merge into the first, unaltered.\n     */\n    merge<T>(first: T[], second: T[]): T[];\n\n    /**\n     * An empty function.\n     */\n    noop(): any;\n\n    /**\n     * Return a number representing the current time.\n     */\n    now(): number;\n\n    /**\n     * Takes a well-formed JSON string and returns the resulting JavaScript object.\n     * \n     * @param json The JSON string to parse.\n     */\n    parseJSON(json: string): any;\n\n    /**\n     * Parses a string into an XML document.\n     *\n     * @param data a well-formed XML string to be parsed\n     */\n    parseXML(data: string): XMLDocument;\n\n    /**\n     * Remove the whitespace from the beginning and end of a string.\n     * \n     * @param str Remove the whitespace from the beginning and end of a string.\n     */\n    trim(str: string): string;\n\n    /**\n     * Determine the internal JavaScript [[Class]] of an object.\n     * \n     * @param obj Object to get the internal JavaScript [[Class]] of.\n     */\n    type(obj: any): string;\n\n    /**\n     * Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.\n     * \n     * @param array The Array of DOM elements.\n     */\n    unique(array: Element[]): Element[];\n\n    /**\n     * Parses a string into an array of DOM nodes.\n     *\n     * @param data HTML string to be parsed\n     * @param context DOM element to serve as the context in which the HTML fragment will be created\n     * @param keepScripts A Boolean indicating whether to include scripts passed in the HTML string\n     */\n    parseHTML(data: string, context?: HTMLElement, keepScripts?: boolean): any[];\n\n    /**\n     * Parses a string into an array of DOM nodes.\n     *\n     * @param data HTML string to be parsed\n     * @param context DOM element to serve as the context in which the HTML fragment will be created\n     * @param keepScripts A Boolean indicating whether to include scripts passed in the HTML string\n     */\n    parseHTML(data: string, context?: Document, keepScripts?: boolean): any[];\n}\n\n/**\n * The jQuery instance members\n */\ninterface JQuery {\n    /**\n     * Register a handler to be called when Ajax requests complete. This is an AjaxEvent.\n     *\n     * @param handler The function to be invoked.\n     */\n    ajaxComplete(handler: (event: JQueryEventObject, XMLHttpRequest: XMLHttpRequest, ajaxOptions: any) => any): JQuery;\n    /**\n     * Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event.\n     *\n     * @param handler The function to be invoked.\n     */\n    ajaxError(handler: (event: JQueryEventObject, jqXHR: JQueryXHR, ajaxSettings: JQueryAjaxSettings, thrownError: any) => any): JQuery;\n    /**\n     * Attach a function to be executed before an Ajax request is sent. This is an Ajax Event.\n     *\n     * @param handler The function to be invoked.\n     */\n    ajaxSend(handler: (event: JQueryEventObject, jqXHR: JQueryXHR, ajaxOptions: JQueryAjaxSettings) => any): JQuery;\n    /**\n     * Register a handler to be called when the first Ajax request begins. This is an Ajax Event.\n     *\n     * @param handler The function to be invoked.\n     */\n    ajaxStart(handler: () => any): JQuery;\n    /**\n     * Register a handler to be called when all Ajax requests have completed. This is an Ajax Event.\n     *\n     * @param handler The function to be invoked.\n     */\n    ajaxStop(handler: () => any): JQuery;\n    /**\n     * Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event.\n     *\n     * @param handler The function to be invoked.\n     */\n    ajaxSuccess(handler: (event: JQueryEventObject, XMLHttpRequest: XMLHttpRequest, ajaxOptions: JQueryAjaxSettings) => any): JQuery;\n\n    /**\n     * Load data from the server and place the returned HTML into the matched element.\n     *\n     * @param url A string containing the URL to which the request is sent.\n     * @param data A plain object or string that is sent to the server with the request.\n     * @param complete A callback function that is executed when the request completes.\n     */\n    load(url: string, data?: string|Object, complete?: (responseText: string, textStatus: string, XMLHttpRequest: XMLHttpRequest) => any): JQuery;\n\n    /**\n     * Encode a set of form elements as a string for submission.\n     */\n    serialize(): string;\n    /**\n     * Encode a set of form elements as an array of names and values.\n     */\n    serializeArray(): JQuerySerializeArrayElement[];\n\n    /**\n     * Adds the specified class(es) to each of the set of matched elements.\n     *\n     * @param className One or more space-separated classes to be added to the class attribute of each matched element.\n     */\n    addClass(className: string): JQuery;\n    /**\n     * Adds the specified class(es) to each of the set of matched elements.\n     *\n     * @param function A function returning one or more space-separated class names to be added to the existing class name(s). Receives the index position of the element in the set and the existing class name(s) as arguments. Within the function, this refers to the current element in the set.\n     */\n    addClass(func: (index: number, className: string) => string): JQuery;\n\n    /**\n     * Add the previous set of elements on the stack to the current set, optionally filtered by a selector.\n     */\n    addBack(selector?: string): JQuery;\n\n    /**\n     * Get the value of an attribute for the first element in the set of matched elements.\n     *\n     * @param attributeName The name of the attribute to get.\n     */\n    attr(attributeName: string): string;\n    /**\n     * Set one or more attributes for the set of matched elements.\n     *\n     * @param attributeName The name of the attribute to set.\n     * @param value A value to set for the attribute.\n     */\n    attr(attributeName: string, value: string|number): JQuery;\n    /**\n     * Set one or more attributes for the set of matched elements.\n     *\n     * @param attributeName The name of the attribute to set.\n     * @param func A function returning the value to set. this is the current element. Receives the index position of the element in the set and the old attribute value as arguments.\n     */\n    attr(attributeName: string, func: (index: number, attr: string) => string|number): JQuery;\n    /**\n     * Set one or more attributes for the set of matched elements.\n     *\n     * @param attributes An object of attribute-value pairs to set.\n     */\n    attr(attributes: Object): JQuery;\n    \n    /**\n     * Determine whether any of the matched elements are assigned the given class.\n     *\n     * @param className The class name to search for.\n     */\n    hasClass(className: string): boolean;\n\n    /**\n     * Get the HTML contents of the first element in the set of matched elements.\n     */\n    html(): string;\n    /**\n     * Set the HTML contents of each element in the set of matched elements.\n     *\n     * @param htmlString A string of HTML to set as the content of each matched element.\n     */\n    html(htmlString: string): JQuery;\n    /**\n     * Set the HTML contents of each element in the set of matched elements.\n     *\n     * @param func A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set.\n     */\n    html(func: (index: number, oldhtml: string) => string): JQuery;\n    /**\n     * Set the HTML contents of each element in the set of matched elements.\n     *\n     * @param func A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set.\n     */\n\n    /**\n     * Get the value of a property for the first element in the set of matched elements.\n     *\n     * @param propertyName The name of the property to get.\n     */\n    prop(propertyName: string): any;\n    /**\n     * Set one or more properties for the set of matched elements.\n     *\n     * @param propertyName The name of the property to set.\n     * @param value A value to set for the property.\n     */\n    prop(propertyName: string, value: string|number|boolean): JQuery;\n    /**\n     * Set one or more properties for the set of matched elements.\n     *\n     * @param properties An object of property-value pairs to set.\n     */\n    prop(properties: Object): JQuery;\n    /**\n     * Set one or more properties for the set of matched elements.\n     *\n     * @param propertyName The name of the property to set.\n     * @param func A function returning the value to set. Receives the index position of the element in the set and the old property value as arguments. Within the function, the keyword this refers to the current element.\n     */\n    prop(propertyName: string, func: (index: number, oldPropertyValue: any) => any): JQuery;\n\n    /**\n     * Remove an attribute from each element in the set of matched elements.\n     *\n     * @param attributeName An attribute to remove; as of version 1.7, it can be a space-separated list of attributes.\n     */\n    removeAttr(attributeName: string): JQuery;\n\n    /**\n     * Remove a single class, multiple classes, or all classes from each element in the set of matched elements.\n     *\n     * @param className One or more space-separated classes to be removed from the class attribute of each matched element.\n     */\n    removeClass(className?: string): JQuery;\n    /**\n     * Remove a single class, multiple classes, or all classes from each element in the set of matched elements.\n     *\n     * @param function A function returning one or more space-separated class names to be removed. Receives the index position of the element in the set and the old class value as arguments.\n     */\n    removeClass(func: (index: number, className: string) => string): JQuery;\n\n    /**\n     * Remove a property for the set of matched elements.\n     *\n     * @param propertyName The name of the property to remove.\n     */\n    removeProp(propertyName: string): JQuery;\n\n    /**\n     * Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.\n     *\n     * @param className One or more class names (separated by spaces) to be toggled for each element in the matched set.\n     * @param swtch A Boolean (not just truthy/falsy) value to determine whether the class should be added or removed.\n     */\n    toggleClass(className: string, swtch?: boolean): JQuery;\n    /**\n     * Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.\n     *\n     * @param swtch A boolean value to determine whether the class should be added or removed.\n     */\n    toggleClass(swtch?: boolean): JQuery;\n    /**\n     * Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.\n     *\n     * @param func A function that returns class names to be toggled in the class attribute of each element in the matched set. Receives the index position of the element in the set, the old class value, and the switch as arguments.\n     * @param swtch A boolean value to determine whether the class should be added or removed.\n     */\n    toggleClass(func: (index: number, className: string, swtch: boolean) => string, swtch?: boolean): JQuery;\n\n    /**\n     * Get the current value of the first element in the set of matched elements.\n     */\n    val(): any;\n    /**\n     * Set the value of each element in the set of matched elements.\n     *\n     * @param value A string of text or an array of strings corresponding to the value of each matched element to set as selected/checked.\n     */\n    val(value: string|string[]): JQuery;\n    /**\n     * Set the value of each element in the set of matched elements.\n     *\n     * @param func A function returning the value to set. this is the current element. Receives the index position of the element in the set and the old value as arguments.\n     */\n    val(func: (index: number, value: string) => string): JQuery;\n\n\n    /**\n     * Get the value of style properties for the first element in the set of matched elements.\n     *\n     * @param propertyName A CSS property.\n     */\n    css(propertyName: string): string;\n    /**\n     * Set one or more CSS properties for the set of matched elements.\n     *\n     * @param propertyName A CSS property name.\n     * @param value A value to set for the property.\n     */\n    css(propertyName: string, value: string|number): JQuery;\n    /**\n     * Set one or more CSS properties for the set of matched elements.\n     *\n     * @param propertyName A CSS property name.\n     * @param value A function returning the value to set. this is the current element. Receives the index position of the element in the set and the old value as arguments.\n     */\n    css(propertyName: string, value: (index: number, value: string) => string|number): JQuery;\n    /**\n     * Set one or more CSS properties for the set of matched elements.\n     *\n     * @param properties An object of property-value pairs to set.\n     */\n    css(properties: Object): JQuery;\n\n    /**\n     * Get the current computed height for the first element in the set of matched elements.\n     */\n    height(): number;\n    /**\n     * Set the CSS height of every matched element.\n     *\n     * @param value An integer representing the number of pixels, or an integer with an optional unit of measure appended (as a string).\n     */\n    height(value: number|string): JQuery;\n    /**\n     * Set the CSS height of every matched element.\n     *\n     * @param func A function returning the height to set. Receives the index position of the element in the set and the old height as arguments. Within the function, this refers to the current element in the set.\n     */\n    height(func: (index: number, height: number) => number|string): JQuery;\n\n    /**\n     * Get the current computed height for the first element in the set of matched elements, including padding but not border.\n     */\n    innerHeight(): number;\n\n    /**\n     * Sets the inner height on elements in the set of matched elements, including padding but not border.\n     *\n     * @param value An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).\n     */\n    innerHeight(height: number|string): JQuery;\n    \n    /**\n     * Get the current computed width for the first element in the set of matched elements, including padding but not border.\n     */\n    innerWidth(): number;\n\n    /**\n     * Sets the inner width on elements in the set of matched elements, including padding but not border.\n     *\n     * @param value An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).\n     */\n    innerWidth(width: number|string): JQuery;\n    \n    /**\n     * Get the current coordinates of the first element in the set of matched elements, relative to the document.\n     */\n    offset(): JQueryCoordinates;\n    /**\n     * An object containing the properties top and left, which are integers indicating the new top and left coordinates for the elements.\n     *\n     * @param coordinates An object containing the properties top and left, which are integers indicating the new top and left coordinates for the elements.\n     */\n    offset(coordinates: JQueryCoordinates): JQuery;\n    /**\n     * An object containing the properties top and left, which are integers indicating the new top and left coordinates for the elements.\n     *\n     * @param func A function to return the coordinates to set. Receives the index of the element in the collection as the first argument and the current coordinates as the second argument. The function should return an object with the new top and left properties.\n     */\n    offset(func: (index: number, coords: JQueryCoordinates) => JQueryCoordinates): JQuery;\n\n    /**\n     * Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin. Returns an integer (without \"px\") representation of the value or null if called on an empty set of elements.\n     *\n     * @param includeMargin A Boolean indicating whether to include the element's margin in the calculation.\n     */\n    outerHeight(includeMargin?: boolean): number;\n\n    /**\n     * Sets the outer height on elements in the set of matched elements, including padding and border.\n     *\n     * @param value An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).\n     */\n    outerHeight(height: number|string): JQuery;\n\n    /**\n     * Get the current computed width for the first element in the set of matched elements, including padding and border.\n     *\n     * @param includeMargin A Boolean indicating whether to include the element's margin in the calculation.\n     */\n    outerWidth(includeMargin?: boolean): number;\n\n    /**\n     * Sets the outer width on elements in the set of matched elements, including padding and border.\n     *\n     * @param value An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).\n     */\n    outerWidth(width: number|string): JQuery;\n\n    /**\n     * Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.\n     */\n    position(): JQueryCoordinates;\n\n    /**\n     * Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element.\n     */\n    scrollLeft(): number;\n    /**\n     * Set the current horizontal position of the scroll bar for each of the set of matched elements.\n     *\n     * @param value An integer indicating the new position to set the scroll bar to.\n     */\n    scrollLeft(value: number): JQuery;\n\n    /**\n     * Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element.\n     */\n    scrollTop(): number;\n    /**\n     * Set the current vertical position of the scroll bar for each of the set of matched elements.\n     *\n     * @param value An integer indicating the new position to set the scroll bar to.\n     */\n    scrollTop(value: number): JQuery;\n\n    /**\n     * Get the current computed width for the first element in the set of matched elements.\n     */\n    width(): number;\n    /**\n     * Set the CSS width of each element in the set of matched elements.\n     *\n     * @param value An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).\n     */\n    width(value: number|string): JQuery;\n    /**\n     * Set the CSS width of each element in the set of matched elements.\n     *\n     * @param func A function returning the width to set. Receives the index position of the element in the set and the old width as arguments. Within the function, this refers to the current element in the set.\n     */\n    width(func: (index: number, width: number) => number|string): JQuery;\n\n    /**\n     * Remove from the queue all items that have not yet been run.\n     *\n     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.\n     */\n    clearQueue(queueName?: string): JQuery;\n\n    /**\n     * Store arbitrary data associated with the matched elements.\n     *\n     * @param key A string naming the piece of data to set.\n     * @param value The new data value; it can be any Javascript type including Array or Object.\n     */\n    data(key: string, value: any): JQuery;\n    /**\n     * Store arbitrary data associated with the matched elements.\n     *\n     * @param obj An object of key-value pairs of data to update.\n     */\n    data(obj: { [key: string]: any; }): JQuery;\n    /**\n     * Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.\n     *\n     * @param key Name of the data stored.\n     */\n    data(key: string): any;\n    /**\n     * Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.\n     */\n    data(): any;\n\n    /**\n     * Execute the next function on the queue for the matched elements.\n     *\n     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.\n     */\n    dequeue(queueName?: string): JQuery;\n\n    /**\n     * Remove a previously-stored piece of data.\n     *\n     * @param name A string naming the piece of data to delete or space-separated string naming the pieces of data to delete.\n     */\n    removeData(name: string): JQuery;\n    /**\n     * Remove a previously-stored piece of data.\n     *\n     * @param list An array of strings naming the pieces of data to delete.\n     */\n    removeData(list: string[]): JQuery;\n\n    /**\n     * Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.\n     *\n     * @param type The type of queue that needs to be observed. (default: fx)\n     * @param target Object onto which the promise methods have to be attached\n     */\n    promise(type?: string, target?: Object): JQueryPromise<any>;\n\n    /**\n     * Perform a custom animation of a set of CSS properties.\n     *\n     * @param properties An object of CSS properties and values that the animation will move toward.\n     * @param duration A string or number determining how long the animation will run.\n     * @param complete A function to call once the animation is complete.\n     */\n    animate(properties: Object, duration?: string|number, complete?: Function): JQuery;\n    /**\n     * Perform a custom animation of a set of CSS properties.\n     *\n     * @param properties An object of CSS properties and values that the animation will move toward.\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing A string indicating which easing function to use for the transition. (default: swing)\n     * @param complete A function to call once the animation is complete.\n     */\n    animate(properties: Object, duration?: string|number, easing?: string, complete?: Function): JQuery;\n    /**\n     * Perform a custom animation of a set of CSS properties.\n     *\n     * @param properties An object of CSS properties and values that the animation will move toward.\n     * @param options A map of additional options to pass to the method.\n     */\n    animate(properties: Object, options: JQueryAnimationOptions): JQuery;\n\n    /**\n     * Set a timer to delay execution of subsequent items in the queue.\n     *\n     * @param duration An integer indicating the number of milliseconds to delay execution of the next item in the queue.\n     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.\n     */\n    delay(duration: number, queueName?: string): JQuery;\n\n    /**\n     * Display the matched elements by fading them to opaque.\n     *\n     * @param duration A string or number determining how long the animation will run.\n     * @param complete A function to call once the animation is complete.\n     */\n    fadeIn(duration?: number|string, complete?: Function): JQuery;\n    /**\n     * Display the matched elements by fading them to opaque.\n     *\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete.\n     */\n    fadeIn(duration?: number|string, easing?: string, complete?: Function): JQuery;\n    /**\n     * Display the matched elements by fading them to opaque.\n     *\n     * @param options A map of additional options to pass to the method.\n     */\n    fadeIn(options: JQueryAnimationOptions): JQuery;\n\n    /**\n     * Hide the matched elements by fading them to transparent.\n     *\n     * @param duration A string or number determining how long the animation will run.\n     * @param complete A function to call once the animation is complete.\n     */\n    fadeOut(duration?: number|string, complete?: Function): JQuery;\n    /**\n     * Hide the matched elements by fading them to transparent.\n     *\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete.\n     */\n    fadeOut(duration?: number|string, easing?: string, complete?: Function): JQuery;\n    /**\n     * Hide the matched elements by fading them to transparent.\n     *\n     * @param options A map of additional options to pass to the method.\n     */\n    fadeOut(options: JQueryAnimationOptions): JQuery;\n\n    /**\n     * Adjust the opacity of the matched elements.\n     *\n     * @param duration A string or number determining how long the animation will run.\n     * @param opacity A number between 0 and 1 denoting the target opacity.\n     * @param complete A function to call once the animation is complete.\n     */\n    fadeTo(duration: string|number, opacity: number, complete?: Function): JQuery;\n    /**\n     * Adjust the opacity of the matched elements.\n     *\n     * @param duration A string or number determining how long the animation will run.\n     * @param opacity A number between 0 and 1 denoting the target opacity.\n     * @param easing A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete.\n     */\n    fadeTo(duration: string|number, opacity: number, easing?: string, complete?: Function): JQuery;\n\n    /**\n     * Display or hide the matched elements by animating their opacity.\n     *\n     * @param duration A string or number determining how long the animation will run.\n     * @param complete A function to call once the animation is complete.\n     */\n    fadeToggle(duration?: number|string, complete?: Function): JQuery;\n    /**\n     * Display or hide the matched elements by animating their opacity.\n     *\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete.\n     */\n    fadeToggle(duration?: number|string, easing?: string, complete?: Function): JQuery;\n    /**\n     * Display or hide the matched elements by animating their opacity.\n     *\n     * @param options A map of additional options to pass to the method.\n     */\n    fadeToggle(options: JQueryAnimationOptions): JQuery;\n\n    /**\n     * Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements.\n     *\n     * @param queue The name of the queue in which to stop animations.\n     */\n    finish(queue?: string): JQuery;\n\n    /**\n     * Hide the matched elements.\n     *\n     * @param duration A string or number determining how long the animation will run.\n     * @param complete A function to call once the animation is complete.\n     */\n    hide(duration?: number|string, complete?: Function): JQuery;\n    /**\n     * Hide the matched elements.\n     *\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete.\n     */\n    hide(duration?: number|string, easing?: string, complete?: Function): JQuery;\n    /**\n     * Hide the matched elements.\n     *\n     * @param options A map of additional options to pass to the method.\n     */\n    hide(options: JQueryAnimationOptions): JQuery;\n\n    /**\n     * Display the matched elements.\n     *\n     * @param duration A string or number determining how long the animation will run.\n     * @param complete A function to call once the animation is complete.\n     */\n    show(duration?: number|string, complete?: Function): JQuery;\n    /**\n     * Display the matched elements.\n     *\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete.\n     */\n    show(duration?: number|string, easing?: string, complete?: Function): JQuery;\n    /**\n     * Display the matched elements.\n     *\n     * @param options A map of additional options to pass to the method.\n     */\n    show(options: JQueryAnimationOptions): JQuery;\n\n    /**\n     * Display the matched elements with a sliding motion.\n     *\n     * @param duration A string or number determining how long the animation will run.\n     * @param complete A function to call once the animation is complete.\n     */\n    slideDown(duration?: number|string, complete?: Function): JQuery;\n    /**\n     * Display the matched elements with a sliding motion.\n     *\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete.\n     */\n    slideDown(duration?: number|string, easing?: string, complete?: Function): JQuery;\n    /**\n     * Display the matched elements with a sliding motion.\n     *\n     * @param options A map of additional options to pass to the method.\n     */\n    slideDown(options: JQueryAnimationOptions): JQuery;\n\n    /**\n     * Display or hide the matched elements with a sliding motion.\n     *\n     * @param duration A string or number determining how long the animation will run.\n     * @param complete A function to call once the animation is complete.\n     */\n    slideToggle(duration?: number|string, complete?: Function): JQuery;\n    /**\n     * Display or hide the matched elements with a sliding motion.\n     *\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete.\n     */\n    slideToggle(duration?: number|string, easing?: string, complete?: Function): JQuery;\n    /**\n     * Display or hide the matched elements with a sliding motion.\n     *\n     * @param options A map of additional options to pass to the method.\n     */\n    slideToggle(options: JQueryAnimationOptions): JQuery;\n\n    /**\n     * Hide the matched elements with a sliding motion.\n     *\n     * @param duration A string or number determining how long the animation will run.\n     * @param complete A function to call once the animation is complete.\n     */\n    slideUp(duration?: number|string, complete?: Function): JQuery;\n    /**\n     * Hide the matched elements with a sliding motion.\n     *\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete.\n     */\n    slideUp(duration?: number|string, easing?: string, complete?: Function): JQuery;\n    /**\n     * Hide the matched elements with a sliding motion.\n     *\n     * @param options A map of additional options to pass to the method.\n     */\n    slideUp(options: JQueryAnimationOptions): JQuery;\n\n    /**\n     * Stop the currently-running animation on the matched elements.\n     *\n     * @param clearQueue A Boolean indicating whether to remove queued animation as well. Defaults to false.\n     * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately. Defaults to false.\n     */\n    stop(clearQueue?: boolean, jumpToEnd?: boolean): JQuery;\n    /**\n     * Stop the currently-running animation on the matched elements.\n     *\n     * @param queue The name of the queue in which to stop animations.\n     * @param clearQueue A Boolean indicating whether to remove queued animation as well. Defaults to false.\n     * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately. Defaults to false.\n     */\n    stop(queue?: string, clearQueue?: boolean, jumpToEnd?: boolean): JQuery;\n\n    /**\n     * Display or hide the matched elements.\n     *\n     * @param duration A string or number determining how long the animation will run.\n     * @param complete A function to call once the animation is complete.\n     */\n    toggle(duration?: number|string, complete?: Function): JQuery;\n    /**\n     * Display or hide the matched elements.\n     *\n     * @param duration A string or number determining how long the animation will run.\n     * @param easing A string indicating which easing function to use for the transition.\n     * @param complete A function to call once the animation is complete.\n     */\n    toggle(duration?: number|string, easing?: string, complete?: Function): JQuery;\n    /**\n     * Display or hide the matched elements.\n     *\n     * @param options A map of additional options to pass to the method.\n     */\n    toggle(options: JQueryAnimationOptions): JQuery;\n    /**\n     * Display or hide the matched elements.\n     *\n     * @param showOrHide A Boolean indicating whether to show or hide the elements.\n     */\n    toggle(showOrHide: boolean): JQuery;\n\n    /**\n     * Attach a handler to an event for the elements.\n     * \n     * @param eventType A string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     */\n    bind(eventType: string, eventData: any, handler: (eventObject: JQueryEventObject) => any): JQuery;\n    /**\n     * Attach a handler to an event for the elements.\n     * \n     * @param eventType A string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names.\n     * @param handler A function to execute each time the event is triggered.\n     */\n    bind(eventType: string, handler: (eventObject: JQueryEventObject) => any): JQuery;\n    /**\n     * Attach a handler to an event for the elements.\n     * \n     * @param eventType A string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names.\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param preventBubble Setting the third argument to false will attach a function that prevents the default action from occurring and stops the event from bubbling. The default is true.\n     */\n    bind(eventType: string, eventData: any, preventBubble: boolean): JQuery;\n    /**\n     * Attach a handler to an event for the elements.\n     * \n     * @param eventType A string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names.\n     * @param preventBubble Setting the third argument to false will attach a function that prevents the default action from occurring and stops the event from bubbling. The default is true.\n     */\n    bind(eventType: string, preventBubble: boolean): JQuery;\n    /**\n     * Attach a handler to an event for the elements.\n     * \n     * @param events An object containing one or more DOM event types and functions to execute for them.\n     */\n    bind(events: any): JQuery;\n\n    /**\n     * Trigger the \"blur\" event on an element\n     */\n    blur(): JQuery;\n    /**\n     * Bind an event handler to the \"blur\" JavaScript event\n     *\n     * @param handler A function to execute each time the event is triggered.\n     */\n    blur(handler: (eventObject: JQueryEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to the \"blur\" JavaScript event\n     *\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     */\n    blur(eventData?: any, handler?: (eventObject: JQueryEventObject) => any): JQuery;\n\n    /**\n     * Trigger the \"change\" event on an element.\n     */\n    change(): JQuery;\n    /**\n     * Bind an event handler to the \"change\" JavaScript event\n     *\n     * @param handler A function to execute each time the event is triggered.\n     */\n    change(handler: (eventObject: JQueryEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to the \"change\" JavaScript event\n     *\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     */\n    change(eventData?: any, handler?: (eventObject: JQueryEventObject) => any): JQuery;\n\n    /**\n     * Trigger the \"click\" event on an element.\n     */\n    click(): JQuery;\n    /**\n     * Bind an event handler to the \"click\" JavaScript event\n     *\n     * @param eventData An object containing data that will be passed to the event handler.\n     */\n    click(handler: (eventObject: JQueryEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to the \"click\" JavaScript event\n     *\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     */\n    click(eventData?: any, handler?: (eventObject: JQueryEventObject) => any): JQuery;\n\n    /**\n     * Trigger the \"dblclick\" event on an element.\n     */\n    dblclick(): JQuery;\n    /**\n     * Bind an event handler to the \"dblclick\" JavaScript event\n     *\n     * @param handler A function to execute each time the event is triggered.\n     */\n    dblclick(handler: (eventObject: JQueryEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to the \"dblclick\" JavaScript event\n     *\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     */\n    dblclick(eventData?: any, handler?: (eventObject: JQueryEventObject) => any): JQuery;\n\n    delegate(selector: any, eventType: string, handler: (eventObject: JQueryEventObject) => any): JQuery;\n    delegate(selector: any, eventType: string, eventData: any, handler: (eventObject: JQueryEventObject) => any): JQuery;\n\n    /**\n     * Trigger the \"focus\" event on an element.\n     */\n    focus(): JQuery;\n    /**\n     * Bind an event handler to the \"focus\" JavaScript event\n     *\n     * @param handler A function to execute each time the event is triggered.\n     */\n    focus(handler: (eventObject: JQueryEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to the \"focus\" JavaScript event\n     *\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     */\n    focus(eventData?: any, handler?: (eventObject: JQueryEventObject) => any): JQuery;\n\n    /**\n     * Bind an event handler to the \"focusin\" JavaScript event\n     *\n     * @param handler A function to execute each time the event is triggered.\n     */\n    focusin(handler: (eventObject: JQueryEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to the \"focusin\" JavaScript event\n     *\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     */\n    focusin(eventData: Object, handler: (eventObject: JQueryEventObject) => any): JQuery;\n\n    /**\n     * Bind an event handler to the \"focusout\" JavaScript event\n     *\n     * @param handler A function to execute each time the event is triggered.\n     */\n    focusout(handler: (eventObject: JQueryEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to the \"focusout\" JavaScript event\n     *\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     */\n    focusout(eventData: Object, handler: (eventObject: JQueryEventObject) => any): JQuery;\n\n    /**\n     * Bind two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.\n     *\n     * @param handlerIn A function to execute when the mouse pointer enters the element.\n     * @param handlerOut A function to execute when the mouse pointer leaves the element.\n     */\n    hover(handlerIn: (eventObject: JQueryEventObject) => any, handlerOut: (eventObject: JQueryEventObject) => any): JQuery;\n    /**\n     * Bind a single handler to the matched elements, to be executed when the mouse pointer enters or leaves the elements.\n     *\n     * @param handlerInOut A function to execute when the mouse pointer enters or leaves the element.\n     */\n    hover(handlerInOut: (eventObject: JQueryEventObject) => any): JQuery;\n\n    /**\n     * Trigger the \"keydown\" event on an element.\n     */\n    keydown(): JQuery;\n    /**\n     * Bind an event handler to the \"keydown\" JavaScript event\n     *\n     * @param handler A function to execute each time the event is triggered.\n     */\n    keydown(handler: (eventObject: JQueryKeyEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to the \"keydown\" JavaScript event\n     *\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     */\n    keydown(eventData?: any, handler?: (eventObject: JQueryKeyEventObject) => any): JQuery;\n\n    /**\n     * Trigger the \"keypress\" event on an element.\n     */\n    keypress(): JQuery;\n    /**\n     * Bind an event handler to the \"keypress\" JavaScript event\n     *\n     * @param handler A function to execute each time the event is triggered.\n     */\n    keypress(handler: (eventObject: JQueryKeyEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to the \"keypress\" JavaScript event\n     *\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     */\n    keypress(eventData?: any, handler?: (eventObject: JQueryKeyEventObject) => any): JQuery;\n\n    /**\n     * Trigger the \"keyup\" event on an element.\n     */\n    keyup(): JQuery;\n    /**\n     * Bind an event handler to the \"keyup\" JavaScript event\n     *\n     * @param handler A function to execute each time the event is triggered.\n     */\n    keyup(handler: (eventObject: JQueryKeyEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to the \"keyup\" JavaScript event\n     *\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     */\n    keyup(eventData?: any, handler?: (eventObject: JQueryKeyEventObject) => any): JQuery;\n\n    /**\n     * Bind an event handler to the \"load\" JavaScript event.\n     *\n     * @param handler A function to execute when the event is triggered.\n     */\n    load(handler: (eventObject: JQueryEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to the \"load\" JavaScript event.\n     *\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute when the event is triggered.\n     */\n    load(eventData?: any, handler?: (eventObject: JQueryEventObject) => any): JQuery;\n\n    /**\n     * Trigger the \"mousedown\" event on an element.\n     */\n    mousedown(): JQuery;\n    /**\n     * Bind an event handler to the \"mousedown\" JavaScript event.\n     *\n     * @param handler A function to execute when the event is triggered.\n     */\n    mousedown(handler: (eventObject: JQueryMouseEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to the \"mousedown\" JavaScript event.\n     *\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute when the event is triggered.\n     */\n    mousedown(eventData: Object, handler: (eventObject: JQueryMouseEventObject) => any): JQuery;\n\n    /**\n     * Trigger the \"mouseenter\" event on an element.\n     */\n    mouseenter(): JQuery;\n    /**\n     * Bind an event handler to be fired when the mouse enters an element.\n     *\n     * @param handler A function to execute when the event is triggered.\n     */\n    mouseenter(handler: (eventObject: JQueryMouseEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to be fired when the mouse enters an element.\n     *\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute when the event is triggered.\n     */\n    mouseenter(eventData: Object, handler: (eventObject: JQueryMouseEventObject) => any): JQuery;\n\n    /**\n     * Trigger the \"mouseleave\" event on an element.\n     */\n    mouseleave(): JQuery;\n    /**\n     * Bind an event handler to be fired when the mouse leaves an element.\n     *\n     * @param handler A function to execute when the event is triggered.\n     */\n    mouseleave(handler: (eventObject: JQueryMouseEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to be fired when the mouse leaves an element.\n     *\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute when the event is triggered.\n     */\n    mouseleave(eventData: Object, handler: (eventObject: JQueryMouseEventObject) => any): JQuery;\n\n    /**\n     * Trigger the \"mousemove\" event on an element.\n     */\n    mousemove(): JQuery;\n    /**\n     * Bind an event handler to the \"mousemove\" JavaScript event.\n     *\n     * @param handler A function to execute when the event is triggered.\n     */\n    mousemove(handler: (eventObject: JQueryMouseEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to the \"mousemove\" JavaScript event.\n     *\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute when the event is triggered.\n     */\n    mousemove(eventData: Object, handler: (eventObject: JQueryMouseEventObject) => any): JQuery;\n\n    /**\n     * Trigger the \"mouseout\" event on an element.\n     */\n    mouseout(): JQuery;\n    /**\n     * Bind an event handler to the \"mouseout\" JavaScript event.\n     *\n     * @param handler A function to execute when the event is triggered.\n     */\n    mouseout(handler: (eventObject: JQueryMouseEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to the \"mouseout\" JavaScript event.\n     *\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute when the event is triggered.\n     */\n    mouseout(eventData: Object, handler: (eventObject: JQueryMouseEventObject) => any): JQuery;\n\n    /**\n     * Trigger the \"mouseover\" event on an element.\n     */\n    mouseover(): JQuery;\n    /**\n     * Bind an event handler to the \"mouseover\" JavaScript event.\n     *\n     * @param handler A function to execute when the event is triggered.\n     */\n    mouseover(handler: (eventObject: JQueryMouseEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to the \"mouseover\" JavaScript event.\n     *\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute when the event is triggered.\n     */\n    mouseover(eventData: Object, handler: (eventObject: JQueryMouseEventObject) => any): JQuery;\n\n    /**\n     * Trigger the \"mouseup\" event on an element.\n     */\n    mouseup(): JQuery;\n    /**\n     * Bind an event handler to the \"mouseup\" JavaScript event.\n     *\n     * @param handler A function to execute when the event is triggered.\n     */\n    mouseup(handler: (eventObject: JQueryMouseEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to the \"mouseup\" JavaScript event.\n     *\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute when the event is triggered.\n     */\n    mouseup(eventData: Object, handler: (eventObject: JQueryMouseEventObject) => any): JQuery;\n\n    /**\n     * Remove an event handler.\n     */\n    off(): JQuery;\n    /**\n     * Remove an event handler.\n     *\n     * @param events One or more space-separated event types and optional namespaces, or just namespaces, such as \"click\", \"keydown.myPlugin\", or \".myPlugin\".\n     * @param selector A selector which should match the one originally passed to .on() when attaching event handlers.\n     * @param handler A handler function previously attached for the event(s), or the special value false.\n     */\n    off(events: string, selector?: string, handler?: (eventObject: JQueryEventObject) => any): JQuery;\n    /**\n     * Remove an event handler.\n     *\n     * @param events One or more space-separated event types and optional namespaces, or just namespaces, such as \"click\", \"keydown.myPlugin\", or \".myPlugin\".\n     * @param handler A handler function previously attached for the event(s), or the special value false.\n     */\n    off(events: string, handler: (eventObject: JQueryEventObject) => any): JQuery;\n    /**\n     * Remove an event handler.\n     *\n     * @param events An object where the string keys represent one or more space-separated event types and optional namespaces, and the values represent handler functions previously attached for the event(s).\n     * @param selector A selector which should match the one originally passed to .on() when attaching event handlers.\n     */\n    off(events: { [key: string]: any; }, selector?: string): JQuery;\n\n    /**\n     * Attach an event handler function for one or more events to the selected elements.\n     *\n     * @param events One or more space-separated event types and optional namespaces, such as \"click\" or \"keydown.myPlugin\".\n     * @param handler A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false. Rest parameter args is for optional parameters passed to jQuery.trigger(). Note that the actual parameters on the event handler function must be marked as optional (? syntax).\n     */\n    on(events: string, handler: (eventObject: JQueryEventObject, ...args: any[]) => any): JQuery;\n    /**\n     * Attach an event handler function for one or more events to the selected elements.\n     *\n     * @param events One or more space-separated event types and optional namespaces, such as \"click\" or \"keydown.myPlugin\".\n     * @param data Data to be passed to the handler in event.data when an event is triggered.\n     * @param handler A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false.\n    */\n    on(events: string, data : any, handler: (eventObject: JQueryEventObject, ...args: any[]) => any): JQuery;\n    /**\n     * Attach an event handler function for one or more events to the selected elements.\n     *\n     * @param events One or more space-separated event types and optional namespaces, such as \"click\" or \"keydown.myPlugin\".\n     * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the selector is null or omitted, the event is always triggered when it reaches the selected element.\n     * @param handler A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false.\n     */\n    on(events: string, selector: string, handler: (eventObject: JQueryEventObject, ...eventData: any[]) => any): JQuery;\n    /**\n     * Attach an event handler function for one or more events to the selected elements.\n     *\n     * @param events One or more space-separated event types and optional namespaces, such as \"click\" or \"keydown.myPlugin\".\n     * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the selector is null or omitted, the event is always triggered when it reaches the selected element.\n     * @param data Data to be passed to the handler in event.data when an event is triggered.\n     * @param handler A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false.\n     */\n    on(events: string, selector: string, data: any, handler: (eventObject: JQueryEventObject, ...eventData: any[]) => any): JQuery;\n    /**\n     * Attach an event handler function for one or more events to the selected elements.\n     *\n     * @param events An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).\n     * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If the selector is null or omitted, the handler is always called when it reaches the selected element.\n     * @param data Data to be passed to the handler in event.data when an event occurs.\n     */\n    on(events: { [key: string]: any; }, selector?: string, data?: any): JQuery;\n    /**\n     * Attach an event handler function for one or more events to the selected elements.\n     *\n     * @param events An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).\n     * @param data Data to be passed to the handler in event.data when an event occurs.\n     */\n    on(events: { [key: string]: any; }, data?: any): JQuery;\n\n    /**\n     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.\n     *\n     * @param events A string containing one or more JavaScript event types, such as \"click\" or \"submit,\" or custom event names.\n     * @param handler A function to execute at the time the event is triggered.\n     */\n    one(events: string, handler: (eventObject: JQueryEventObject) => any): JQuery;\n    /**\n     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.\n     *\n     * @param events A string containing one or more JavaScript event types, such as \"click\" or \"submit,\" or custom event names.\n     * @param data An object containing data that will be passed to the event handler.\n     * @param handler A function to execute at the time the event is triggered.\n     */\n    one(events: string, data: Object, handler: (eventObject: JQueryEventObject) => any): JQuery;\n\n    /**\n     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.\n     *\n     * @param events One or more space-separated event types and optional namespaces, such as \"click\" or \"keydown.myPlugin\".\n     * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the selector is null or omitted, the event is always triggered when it reaches the selected element.\n     * @param handler A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false.\n     */\n    one(events: string, selector: string, handler: (eventObject: JQueryEventObject) => any): JQuery;\n    /**\n     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.\n     *\n     * @param events One or more space-separated event types and optional namespaces, such as \"click\" or \"keydown.myPlugin\".\n     * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the selector is null or omitted, the event is always triggered when it reaches the selected element.\n     * @param data Data to be passed to the handler in event.data when an event is triggered.\n     * @param handler A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false.\n     */\n    one(events: string, selector: string, data: any, handler: (eventObject: JQueryEventObject) => any): JQuery;\n\n    /**\n     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.\n     *\n     * @param events An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).\n     * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If the selector is null or omitted, the handler is always called when it reaches the selected element.\n     * @param data Data to be passed to the handler in event.data when an event occurs.\n     */\n    one(events: { [key: string]: any; }, selector?: string, data?: any): JQuery;\n\n    /**\n     * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.\n     *\n     * @param events An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).\n     * @param data Data to be passed to the handler in event.data when an event occurs.\n     */\n    one(events: { [key: string]: any; }, data?: any): JQuery;\n\n\n    /**\n     * Specify a function to execute when the DOM is fully loaded.\n     *\n     * @param handler A function to execute after the DOM is ready.\n     */\n    ready(handler: Function): JQuery;\n\n    /**\n     * Trigger the \"resize\" event on an element.\n     */\n    resize(): JQuery;\n    /**\n     * Bind an event handler to the \"resize\" JavaScript event.\n     *\n     * @param handler A function to execute each time the event is triggered.\n     */\n    resize(handler: (eventObject: JQueryEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to the \"resize\" JavaScript event.\n     *\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     */\n    resize(eventData: Object, handler: (eventObject: JQueryEventObject) => any): JQuery;\n\n    /**\n     * Trigger the \"scroll\" event on an element.\n     */\n    scroll(): JQuery;\n    /**\n     * Bind an event handler to the \"scroll\" JavaScript event.\n     *\n     * @param handler A function to execute each time the event is triggered.\n     */\n    scroll(handler: (eventObject: JQueryEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to the \"scroll\" JavaScript event.\n     *\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     */\n    scroll(eventData: Object, handler: (eventObject: JQueryEventObject) => any): JQuery;\n\n    /**\n     * Trigger the \"select\" event on an element.\n     */\n    select(): JQuery;\n    /**\n     * Bind an event handler to the \"select\" JavaScript event.\n     *\n     * @param handler A function to execute each time the event is triggered.\n     */\n    select(handler: (eventObject: JQueryEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to the \"select\" JavaScript event.\n     *\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     */\n    select(eventData: Object, handler: (eventObject: JQueryEventObject) => any): JQuery;\n\n    /**\n     * Trigger the \"submit\" event on an element.\n     */\n    submit(): JQuery;\n    /**\n     * Bind an event handler to the \"submit\" JavaScript event\n     *\n     * @param handler A function to execute each time the event is triggered.\n     */\n    submit(handler: (eventObject: JQueryEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to the \"submit\" JavaScript event\n     *\n     * @param eventData An object containing data that will be passed to the event handler.\n     * @param handler A function to execute each time the event is triggered.\n     */\n    submit(eventData?: any, handler?: (eventObject: JQueryEventObject) => any): JQuery;\n\n    /**\n     * Execute all handlers and behaviors attached to the matched elements for the given event type.\n     * \n     * @param eventType A string containing a JavaScript event type, such as click or submit.\n     * @param extraParameters Additional parameters to pass along to the event handler.\n     */\n    trigger(eventType: string, extraParameters?: any[]|Object): JQuery;\n    /**\n     * Execute all handlers and behaviors attached to the matched elements for the given event type.\n     * \n     * @param event A jQuery.Event object.\n     * @param extraParameters Additional parameters to pass along to the event handler.\n     */\n    trigger(event: JQueryEventObject, extraParameters?: any[]|Object): JQuery;\n\n    /**\n     * Execute all handlers attached to an element for an event.\n     * \n     * @param eventType A string containing a JavaScript event type, such as click or submit.\n     * @param extraParameters An array of additional parameters to pass along to the event handler.\n     */\n    triggerHandler(eventType: string, ...extraParameters: any[]): Object;\n\n    /**\n     * Remove a previously-attached event handler from the elements.\n     * \n     * @param eventType A string containing a JavaScript event type, such as click or submit.\n     * @param handler The function that is to be no longer executed.\n     */\n    unbind(eventType?: string, handler?: (eventObject: JQueryEventObject) => any): JQuery;\n    /**\n     * Remove a previously-attached event handler from the elements.\n     * \n     * @param eventType A string containing a JavaScript event type, such as click or submit.\n     * @param fls Unbinds the corresponding 'return false' function that was bound using .bind( eventType, false ).\n     */\n    unbind(eventType: string, fls: boolean): JQuery;\n    /**\n     * Remove a previously-attached event handler from the elements.\n     * \n     * @param evt A JavaScript event object as passed to an event handler.\n     */\n    unbind(evt: any): JQuery;\n\n    /**\n     * Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.\n     */\n    undelegate(): JQuery;\n    /**\n     * Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.\n     * \n     * @param selector A selector which will be used to filter the event results.\n     * @param eventType A string containing a JavaScript event type, such as \"click\" or \"keydown\"\n     * @param handler A function to execute at the time the event is triggered.\n     */\n    undelegate(selector: string, eventType: string, handler?: (eventObject: JQueryEventObject) => any): JQuery;\n    /**\n     * Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.\n     * \n     * @param selector A selector which will be used to filter the event results.\n     * @param events An object of one or more event types and previously bound functions to unbind from them.\n     */\n    undelegate(selector: string, events: Object): JQuery;\n    /**\n     * Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.\n     * \n     * @param namespace A string containing a namespace to unbind all events from.\n     */\n    undelegate(namespace: string): JQuery;\n\n    /**\n     * Bind an event handler to the \"unload\" JavaScript event. (DEPRECATED from v1.8)\n     * \n     * @param handler A function to execute when the event is triggered.\n     */\n    unload(handler: (eventObject: JQueryEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to the \"unload\" JavaScript event. (DEPRECATED from v1.8)\n     * \n     * @param eventData A plain object of data that will be passed to the event handler.\n     * @param handler A function to execute when the event is triggered.\n     */\n    unload(eventData?: any, handler?: (eventObject: JQueryEventObject) => any): JQuery;\n\n    /**\n     * The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document. (DEPRECATED from v1.10)\n     */\n    context: Element;\n\n    jquery: string;\n\n    /**\n     * Bind an event handler to the \"error\" JavaScript event. (DEPRECATED from v1.8)\n     * \n     * @param handler A function to execute when the event is triggered.\n     */\n    error(handler: (eventObject: JQueryEventObject) => any): JQuery;\n    /**\n     * Bind an event handler to the \"error\" JavaScript event. (DEPRECATED from v1.8)\n     * \n     * @param eventData A plain object of data that will be passed to the event handler.\n     * @param handler A function to execute when the event is triggered.\n     */\n    error(eventData: any, handler: (eventObject: JQueryEventObject) => any): JQuery;\n\n    /**\n     * Add a collection of DOM elements onto the jQuery stack.\n     * \n     * @param elements An array of elements to push onto the stack and make into a new jQuery object.\n     */\n    pushStack(elements: any[]): JQuery;\n    /**\n     * Add a collection of DOM elements onto the jQuery stack.\n     * \n     * @param elements An array of elements to push onto the stack and make into a new jQuery object.\n     * @param name The name of a jQuery method that generated the array of elements.\n     * @param arguments The arguments that were passed in to the jQuery method (for serialization).\n     */\n    pushStack(elements: any[], name: string, arguments: any[]): JQuery;\n\n    /**\n     * Insert content, specified by the parameter, after each element in the set of matched elements.\n     * \n     * param content1 HTML string, DOM element, array of elements, or jQuery object to insert after each element in the set of matched elements.\n     * param content2 One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert after each element in the set of matched elements.\n     */\n    after(content1: JQuery|any[]|Element|Text|string, ...content2: any[]): JQuery;\n    /**\n     * Insert content, specified by the parameter, after each element in the set of matched elements.\n     * \n     * param func A function that returns an HTML string, DOM element(s), or jQuery object to insert after each element in the set of matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.\n     */\n    after(func: (index: number, html: string) => string|Element|JQuery): JQuery;\n\n    /**\n     * Insert content, specified by the parameter, to the end of each element in the set of matched elements.\n     * \n     * param content1 DOM element, array of elements, HTML string, or jQuery object to insert at the end of each element in the set of matched elements.\n     * param content2 One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert at the end of each element in the set of matched elements.\n     */\n    append(content1: JQuery|any[]|Element|Text|string, ...content2: any[]): JQuery;\n    /**\n     * Insert content, specified by the parameter, to the end of each element in the set of matched elements.\n     * \n     * param func A function that returns an HTML string, DOM element(s), or jQuery object to insert at the end of each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, this refers to the current element in the set.\n     */\n    append(func: (index: number, html: string) => string|Element|JQuery): JQuery;\n\n    /**\n     * Insert every element in the set of matched elements to the end of the target.\n     * \n     * @param target A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the end of the element(s) specified by this parameter.\n     */\n    appendTo(target: JQuery|any[]|Element|string): JQuery;\n\n    /**\n     * Insert content, specified by the parameter, before each element in the set of matched elements.\n     * \n     * param content1 HTML string, DOM element, array of elements, or jQuery object to insert before each element in the set of matched elements.\n     * param content2 One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert before each element in the set of matched elements.\n     */\n    before(content1: JQuery|any[]|Element|Text|string, ...content2: any[]): JQuery;\n    /**\n     * Insert content, specified by the parameter, before each element in the set of matched elements.\n     * \n     * param func A function that returns an HTML string, DOM element(s), or jQuery object to insert before each element in the set of matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.\n     */\n    before(func: (index: number, html: string) => string|Element|JQuery): JQuery;\n\n    /**\n     * Create a deep copy of the set of matched elements.\n     * \n     * param withDataAndEvents A Boolean indicating whether event handlers and data should be copied along with the elements. The default value is false.\n     * param deepWithDataAndEvents A Boolean indicating whether event handlers and data for all children of the cloned element should be copied. By default its value matches the first argument's value (which defaults to false).\n     */\n    clone(withDataAndEvents?: boolean, deepWithDataAndEvents?: boolean): JQuery;\n\n    /**\n     * Remove the set of matched elements from the DOM.\n     * \n     * param selector A selector expression that filters the set of matched elements to be removed.\n     */\n    detach(selector?: string): JQuery;\n\n    /**\n     * Remove all child nodes of the set of matched elements from the DOM.\n     */\n    empty(): JQuery;\n\n    /**\n     * Insert every element in the set of matched elements after the target.\n     * \n     * param target A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted after the element(s) specified by this parameter.\n     */\n    insertAfter(target: JQuery|any[]|Element|Text|string): JQuery;\n\n    /**\n     * Insert every element in the set of matched elements before the target.\n     * \n     * param target A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted before the element(s) specified by this parameter.\n     */\n    insertBefore(target: JQuery|any[]|Element|Text|string): JQuery;\n\n    /**\n     * Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.\n     * \n     * param content1 DOM element, array of elements, HTML string, or jQuery object to insert at the beginning of each element in the set of matched elements.\n     * param content2 One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert at the beginning of each element in the set of matched elements.\n     */\n    prepend(content1: JQuery|any[]|Element|Text|string, ...content2: any[]): JQuery;\n    /**\n     * Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.\n     * \n     * param func A function that returns an HTML string, DOM element(s), or jQuery object to insert at the beginning of each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, this refers to the current element in the set.\n     */\n    prepend(func: (index: number, html: string) => string|Element|JQuery): JQuery;\n\n    /**\n     * Insert every element in the set of matched elements to the beginning of the target.\n     * \n     * @param target A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the beginning of the element(s) specified by this parameter.\n     */\n    prependTo(target: JQuery|any[]|Element|string): JQuery;\n\n    /**\n     * Remove the set of matched elements from the DOM.\n     * \n     * @param selector A selector expression that filters the set of matched elements to be removed.\n     */\n    remove(selector?: string): JQuery;\n\n    /**\n     * Replace each target element with the set of matched elements.\n     * \n     * @param target A selector string, jQuery object, DOM element, or array of elements indicating which element(s) to replace.\n     */\n    replaceAll(target: JQuery|any[]|Element|string): JQuery;\n\n    /**\n     * Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed.\n     * \n     * param newContent The content to insert. May be an HTML string, DOM element, array of DOM elements, or jQuery object.\n     */\n    replaceWith(newContent: JQuery|any[]|Element|Text|string): JQuery;\n    /**\n     * Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed.\n     * \n     * param func A function that returns content with which to replace the set of matched elements.\n     */\n    replaceWith(func: () => Element|JQuery): JQuery;\n\n    /**\n     * Get the combined text contents of each element in the set of matched elements, including their descendants.\n     */\n    text(): string;\n    /**\n     * Set the content of each element in the set of matched elements to the specified text.\n     * \n     * @param text The text to set as the content of each matched element. When Number or Boolean is supplied, it will be converted to a String representation.\n     */\n    text(text: string|number|boolean): JQuery;\n    /**\n     * Set the content of each element in the set of matched elements to the specified text.\n     * \n     * @param func A function returning the text content to set. Receives the index position of the element in the set and the old text value as arguments.\n     */\n    text(func: (index: number, text: string) => string): JQuery;\n\n    /**\n     * Retrieve all the elements contained in the jQuery set, as an array.\n     */\n    toArray(): any[];\n\n    /**\n     * Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.\n     */\n    unwrap(): JQuery;\n\n    /**\n     * Wrap an HTML structure around each element in the set of matched elements.\n     * \n     * @param wrappingElement A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements.\n     */\n    wrap(wrappingElement: JQuery|Element|string): JQuery;\n    /**\n     * Wrap an HTML structure around each element in the set of matched elements.\n     * \n     * @param func A callback function returning the HTML content or jQuery object to wrap around the matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.\n     */\n    wrap(func: (index: number) => string|JQuery): JQuery;\n\n    /**\n     * Wrap an HTML structure around all elements in the set of matched elements.\n     * \n     * @param wrappingElement A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements.\n     */\n    wrapAll(wrappingElement: JQuery|Element|string): JQuery;\n    wrapAll(func: (index: number) => string): JQuery;\n\n    /**\n     * Wrap an HTML structure around the content of each element in the set of matched elements.\n     * \n     * @param wrappingElement An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the content of the matched elements.\n     */\n    wrapInner(wrappingElement: JQuery|Element|string): JQuery;\n    /**\n     * Wrap an HTML structure around the content of each element in the set of matched elements.\n     * \n     * @param func A callback function which generates a structure to wrap around the content of the matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.\n     */\n    wrapInner(func: (index: number) => string): JQuery;\n\n    /**\n     * Iterate over a jQuery object, executing a function for each matched element.\n     * \n     * @param func A function to execute for each matched element.\n     */\n    each(func: (index: number, elem: Element) => any): JQuery;\n\n    /**\n     * Retrieve one of the elements matched by the jQuery object.\n     * \n     * @param index A zero-based integer indicating which element to retrieve.\n     */\n    get(index: number): HTMLElement;\n    /**\n     * Retrieve the elements matched by the jQuery object.\n     */\n    get(): any[];\n\n    /**\n     * Search for a given element from among the matched elements.\n     */\n    index(): number;\n    /**\n     * Search for a given element from among the matched elements.\n     * \n     * @param selector A selector representing a jQuery collection in which to look for an element.\n     */\n    index(selector: string|JQuery|Element): number;\n\n    /**\n     * The number of elements in the jQuery object.\n     */\n    length: number;\n    /**\n     * A selector representing selector passed to jQuery(), if any, when creating the original set.\n     * version deprecated: 1.7, removed: 1.9\n     */\n    selector: string;\n    [index: string]: any;\n    [index: number]: HTMLElement;\n\n    /**\n     * Add elements to the set of matched elements.\n     * \n     * @param selector A string representing a selector expression to find additional elements to add to the set of matched elements.\n     * @param context The point in the document at which the selector should begin matching; similar to the context argument of the $(selector, context) method.\n     */\n    add(selector: string, context?: Element): JQuery;\n    /**\n     * Add elements to the set of matched elements.\n     * \n     * @param elements One or more elements to add to the set of matched elements.\n     */\n    add(...elements: Element[]): JQuery;\n    /**\n     * Add elements to the set of matched elements.\n     * \n     * @param html An HTML fragment to add to the set of matched elements.\n     */\n    add(html: string): JQuery;\n    /**\n     * Add elements to the set of matched elements.\n     * \n     * @param obj An existing jQuery object to add to the set of matched elements.\n     */\n    add(obj: JQuery): JQuery;\n\n    /**\n     * Get the children of each element in the set of matched elements, optionally filtered by a selector.\n     * \n     * @param selector A string containing a selector expression to match elements against.\n     */\n    children(selector?: string): JQuery;\n\n    /**\n     * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n     * \n     * @param selector A string containing a selector expression to match elements against.\n     */\n    closest(selector: string): JQuery;\n    /**\n     * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n     * \n     * @param selector A string containing a selector expression to match elements against.\n     * @param context A DOM element within which a matching element may be found. If no context is passed in then the context of the jQuery set will be used instead.\n     */\n    closest(selector: string, context?: Element): JQuery;\n    /**\n     * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n     * \n     * @param obj A jQuery object to match elements against.\n     */\n    closest(obj: JQuery): JQuery;\n    /**\n     * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n     * \n     * @param element An element to match elements against.\n     */\n    closest(element: Element): JQuery;\n\n    /**\n     * Get an array of all the elements and selectors matched against the current element up through the DOM tree.\n     * \n     * @param selectors An array or string containing a selector expression to match elements against (can also be a jQuery object).\n     * @param context A DOM element within which a matching element may be found. If no context is passed in then the context of the jQuery set will be used instead.\n     */\n    closest(selectors: any, context?: Element): any[];\n\n    /**\n     * Get the children of each element in the set of matched elements, including text and comment nodes.\n     */\n    contents(): JQuery;\n\n    /**\n     * End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.\n     */\n    end(): JQuery;\n\n    /**\n     * Reduce the set of matched elements to the one at the specified index.\n     * \n     * @param index An integer indicating the 0-based position of the element. OR An integer indicating the position of the element, counting backwards from the last element in the set.\n     *  \n     */\n    eq(index: number): JQuery;\n\n    /**\n     * Reduce the set of matched elements to those that match the selector or pass the function's test.\n     * \n     * @param selector A string containing a selector expression to match the current set of elements against.\n     */\n    filter(selector: string): JQuery;\n    /**\n     * Reduce the set of matched elements to those that match the selector or pass the function's test.\n     * \n     * @param func A function used as a test for each element in the set. this is the current DOM element.\n     */\n    filter(func: (index: number, element: Element) => any): JQuery;\n    /**\n     * Reduce the set of matched elements to those that match the selector or pass the function's test.\n     * \n     * @param element An element to match the current set of elements against.\n     */\n    filter(element: Element): JQuery;\n    /**\n     * Reduce the set of matched elements to those that match the selector or pass the function's test.\n     * \n     * @param obj An existing jQuery object to match the current set of elements against.\n     */\n    filter(obj: JQuery): JQuery;\n\n    /**\n     * Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.\n     * \n     * @param selector A string containing a selector expression to match elements against.\n     */\n    find(selector: string): JQuery;\n    /**\n     * Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.\n     * \n     * @param element An element to match elements against.\n     */\n    find(element: Element): JQuery;\n    /**\n     * Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.\n     * \n     * @param obj A jQuery object to match elements against.\n     */\n    find(obj: JQuery): JQuery;\n\n    /**\n     * Reduce the set of matched elements to the first in the set.\n     */\n    first(): JQuery;\n\n    /**\n     * Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.\n     * \n     * @param selector A string containing a selector expression to match elements against.\n     */\n    has(selector: string): JQuery;\n    /**\n     * Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.\n     * \n     * @param contained A DOM element to match elements against.\n     */\n    has(contained: Element): JQuery;\n\n    /**\n     * Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.\n     * \n     * @param selector A string containing a selector expression to match elements against.\n     */\n    is(selector: string): boolean;\n    /**\n     * Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.\n     * \n     * @param func A function used as a test for the set of elements. It accepts one argument, index, which is the element's index in the jQuery collection.Within the function, this refers to the current DOM element.\n     */\n    is(func: (index: number, element: Element) => boolean): boolean;\n    /**\n     * Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.\n     * \n     * @param obj An existing jQuery object to match the current set of elements against.\n     */\n    is(obj: JQuery): boolean;\n    /**\n     * Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.\n     * \n     * @param elements One or more elements to match the current set of elements against.\n     */\n    is(elements: any): boolean;\n\n    /**\n     * Reduce the set of matched elements to the final one in the set.\n     */\n    last(): JQuery;\n\n    /**\n     * Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.\n     * \n     * @param callback A function object that will be invoked for each element in the current set.\n     */\n    map(callback: (index: number, domElement: Element) => any): JQuery;\n\n    /**\n     * Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector.\n     * \n     * @param selector A string containing a selector expression to match elements against.\n     */\n    next(selector?: string): JQuery;\n\n    /**\n     * Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.\n     * \n     * @param selector A string containing a selector expression to match elements against.\n     */\n    nextAll(selector?: string): JQuery;\n\n    /**\n     * Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.\n     * \n     * @param selector A string containing a selector expression to indicate where to stop matching following sibling elements.\n     * @param filter A string containing a selector expression to match elements against.\n     */\n    nextUntil(selector?: string, filter?: string): JQuery;\n    /**\n     * Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.\n     * \n     * @param element A DOM node or jQuery object indicating where to stop matching following sibling elements.\n     * @param filter A string containing a selector expression to match elements against.\n     */\n    nextUntil(element?: Element, filter?: string): JQuery;\n    /**\n     * Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.\n     * \n     * @param obj A DOM node or jQuery object indicating where to stop matching following sibling elements.\n     * @param filter A string containing a selector expression to match elements against.\n     */\n    nextUntil(obj?: JQuery, filter?: string): JQuery;\n\n    /**\n     * Remove elements from the set of matched elements.\n     * \n     * @param selector A string containing a selector expression to match elements against.\n     */\n    not(selector: string): JQuery;\n    /**\n     * Remove elements from the set of matched elements.\n     * \n     * @param func A function used as a test for each element in the set. this is the current DOM element.\n     */\n    not(func: (index: number, element: Element) => boolean): JQuery;\n    /**\n     * Remove elements from the set of matched elements.\n     * \n     * @param elements One or more DOM elements to remove from the matched set.\n     */\n    not(...elements: Element[]): JQuery;\n    /**\n     * Remove elements from the set of matched elements.\n     * \n     * @param obj An existing jQuery object to match the current set of elements against.\n     */\n    not(obj: JQuery): JQuery;\n\n    /**\n     * Get the closest ancestor element that is positioned.\n     */\n    offsetParent(): JQuery;\n\n    /**\n     * Get the parent of each element in the current set of matched elements, optionally filtered by a selector.\n     * \n     * @param selector A string containing a selector expression to match elements against.\n     */\n    parent(selector?: string): JQuery;\n\n    /**\n     * Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.\n     * \n     * @param selector A string containing a selector expression to match elements against.\n     */\n    parents(selector?: string): JQuery;\n\n    /**\n     * Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.\n     * \n     * @param selector A string containing a selector expression to indicate where to stop matching ancestor elements.\n     * @param filter A string containing a selector expression to match elements against.\n     */\n    parentsUntil(selector?: string, filter?: string): JQuery;\n    /**\n     * Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.\n     * \n     * @param element A DOM node or jQuery object indicating where to stop matching ancestor elements.\n     * @param filter A string containing a selector expression to match elements against.\n     */\n    parentsUntil(element?: Element, filter?: string): JQuery;\n    /**\n     * Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.\n     * \n     * @param obj A DOM node or jQuery object indicating where to stop matching ancestor elements.\n     * @param filter A string containing a selector expression to match elements against.\n     */\n    parentsUntil(obj?: JQuery, filter?: string): JQuery;\n\n    /**\n     * Get the immediately preceding sibling of each element in the set of matched elements, optionally filtered by a selector.\n     * \n     * @param selector A string containing a selector expression to match elements against.\n     */\n    prev(selector?: string): JQuery;\n\n    /**\n     * Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.\n     * \n     * @param selector A string containing a selector expression to match elements against.\n     */\n    prevAll(selector?: string): JQuery;\n\n    /**\n     * Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.\n     * \n     * @param selector A string containing a selector expression to indicate where to stop matching preceding sibling elements.\n     * @param filter A string containing a selector expression to match elements against.\n     */\n    prevUntil(selector?: string, filter?: string): JQuery;\n    /**\n     * Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.\n     * \n     * @param element A DOM node or jQuery object indicating where to stop matching preceding sibling elements.\n     * @param filter A string containing a selector expression to match elements against.\n     */\n    prevUntil(element?: Element, filter?: string): JQuery;\n    /**\n     * Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.\n     * \n     * @param obj A DOM node or jQuery object indicating where to stop matching preceding sibling elements.\n     * @param filter A string containing a selector expression to match elements against.\n     */\n    prevUntil(obj?: JQuery, filter?: string): JQuery;\n\n    /**\n     * Get the siblings of each element in the set of matched elements, optionally filtered by a selector.\n     * \n     * @param selector A string containing a selector expression to match elements against.\n     */\n    siblings(selector?: string): JQuery;\n\n    /**\n     * Reduce the set of matched elements to a subset specified by a range of indices.\n     * \n     * @param start An integer indicating the 0-based position at which the elements begin to be selected. If negative, it indicates an offset from the end of the set.\n     * @param end An integer indicating the 0-based position at which the elements stop being selected. If negative, it indicates an offset from the end of the set. If omitted, the range continues until the end of the set.\n     */\n    slice(start: number, end?: number): JQuery;\n\n    /**\n     * Show the queue of functions to be executed on the matched elements.\n     * \n     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.\n     */\n    queue(queueName?: string): any[];\n    /**\n     * Manipulate the queue of functions to be executed, once for each matched element.\n     * \n     * @param newQueue An array of functions to replace the current queue contents.\n     */\n    queue(newQueue: Function[]): JQuery;\n    /**\n     * Manipulate the queue of functions to be executed, once for each matched element.\n     * \n     * @param callback The new function to add to the queue, with a function to call that will dequeue the next item.\n     */\n    queue(callback: Function): JQuery;\n    /**\n     * Manipulate the queue of functions to be executed, once for each matched element.\n     * \n     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.\n     * @param newQueue An array of functions to replace the current queue contents.\n     */\n    queue(queueName: string, newQueue: Function[]): JQuery;\n    /**\n     * Manipulate the queue of functions to be executed, once for each matched element.\n     * \n     * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.\n     * @param callback The new function to add to the queue, with a function to call that will dequeue the next item.\n     */\n    queue(queueName: string, callback: Function): JQuery;\n}\ndeclare module \"jquery\" {\n    export = $;\n}\ndeclare var jQuery: JQueryStatic;\ndeclare var $: JQueryStatic;\n"]}
//# sourceURL=/Users/shannonbertucci/.dotfiles/atom.symlink/packages/atom-typescript/lib/typings/jquery/jquery.d.ts
