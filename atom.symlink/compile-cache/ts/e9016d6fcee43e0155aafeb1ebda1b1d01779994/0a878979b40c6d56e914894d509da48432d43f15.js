var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var view = require('./view');
var $ = view.$;
var LineMessageView = (function (_super) {
    __extends(LineMessageView, _super);
    function LineMessageView() {
        _super.apply(this, arguments);
    }
    LineMessageView.content = function () {
        var _this = this;
        return this.div({
            class: 'line-message'
        }, function () {
            _this.div({
                class: 'text-subtle inline-block',
                outlet: 'position',
                click: 'goToLine',
                style: 'cursor: pointer;'
            });
            _this.div({
                class: 'message inline-block',
                outlet: 'contents'
            });
            _this.pre({
                class: 'preview',
                outlet: 'code',
                click: 'goToLine',
                style: 'cursor: pointer;'
            });
        });
    };
    LineMessageView.prototype.init = function () {
        var message = 'at line ' + this.options.line;
        if (this.options.file !== undefined) {
            message += ', file ' + this.options.file;
        }
        this.position.text(message);
        this.contents.text(this.options.message);
        if (this.options.preview) {
            this.code.text(this.options.preview);
        }
        else {
            this.code.remove();
        }
    };
    LineMessageView.prototype.goToLine = function () {
        this.options.goToLine(this.options.file, this.options.line, this.options.col);
    };
    LineMessageView.prototype.getSummary = function () {
        var pos = this.options.line.toString();
        if (this.options.file !== undefined) {
            pos += ', ' + this.options.file;
        }
        return {
            summary: pos + ' ' + this.options.message,
            rawSummary: true,
            handler: function (element) {
                $(element).css('cursor', 'pointer').click(this.goToLine.bind(this));
            }.bind(this)
        };
    };
    return LineMessageView;
})(view.View);
exports.LineMessageView = LineMessageView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3NoYW5ub25iZXJ0dWNjaS8uZG90ZmlsZXMvYXRvbS5zeW1saW5rL3BhY2thZ2VzL2F0b20tdHlwZXNjcmlwdC9saWIvbWFpbi9hdG9tL3ZpZXdzL2xpbmVNZXNzYWdlVmlldy50cyIsInNvdXJjZXMiOlsiL1VzZXJzL3NoYW5ub25iZXJ0dWNjaS8uZG90ZmlsZXMvYXRvbS5zeW1saW5rL3BhY2thZ2VzL2F0b20tdHlwZXNjcmlwdC9saWIvbWFpbi9hdG9tL3ZpZXdzL2xpbmVNZXNzYWdlVmlldy50cyJdLCJuYW1lcyI6WyJMaW5lTWVzc2FnZVZpZXciLCJMaW5lTWVzc2FnZVZpZXcuY29uc3RydWN0b3IiLCJMaW5lTWVzc2FnZVZpZXcuY29udGVudCIsIkxpbmVNZXNzYWdlVmlldy5pbml0IiwiTGluZU1lc3NhZ2VWaWV3LmdvVG9MaW5lIiwiTGluZU1lc3NhZ2VWaWV3LmdldFN1bW1hcnkiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQU8sSUFBSSxXQUFXLFFBQVEsQ0FBQyxDQUFDO0FBQ2hDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7QUFvQmYsSUFBYSxlQUFlO0lBQVNBLFVBQXhCQSxlQUFlQSxVQUErQkE7SUFBM0RBLFNBQWFBLGVBQWVBO1FBQVNDLDhCQUFzQkE7SUFrRTNEQSxDQUFDQTtJQTVEVUQsdUJBQU9BLEdBQWRBO1FBQUFFLGlCQXNCQ0E7UUFyQkdBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBO1lBQ1pBLEtBQUtBLEVBQUVBLGNBQWNBO1NBQ3hCQSxFQUFFQTtZQUNDQSxLQUFJQSxDQUFDQSxHQUFHQSxDQUFDQTtnQkFDTEEsS0FBS0EsRUFBRUEsMEJBQTBCQTtnQkFDakNBLE1BQU1BLEVBQUVBLFVBQVVBO2dCQUNsQkEsS0FBS0EsRUFBRUEsVUFBVUE7Z0JBQ2pCQSxLQUFLQSxFQUFFQSxrQkFBa0JBO2FBQzVCQSxDQUFDQSxDQUFDQTtZQUNIQSxLQUFJQSxDQUFDQSxHQUFHQSxDQUFD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RVosQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2aWV3ID0gcmVxdWlyZSgnLi92aWV3Jyk7XG52YXIgJCA9IHZpZXcuJDtcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5leHBvcnQgaW50ZXJmYWNlIFZpZXdPcHRpb25zIHtcbiAgICAvKiogVGhpcyBpcyBuZWVkZWQgdG8gc3VwcG9ydCBnb29kIGdvdG8gbmV4dCAvIGdvdG8gcHJldmlvdXMgbG9naWNcbiAgICAgKiAgV2UgaW5mb3JtIHRoZSBwYXJlbnQgYWJvdXQgb3VyIG5hdmlnYXRpb25cbiAgICAgKi9cbiAgICBnb1RvTGluZTogKGZpbGVQYXRoOiBzdHJpbmcsIGxpbmU6IG51bWJlciwgY29sOiBudW1iZXIpID0+IGFueTtcbiAgICAvKiogeW91ciBtZXNzYWdlIHRvIHRoZSBwZW9wbGUgKi9cbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgLyoqIHdoYXQgbGluZSBhcmUgd2UgdGFsa2luZyBhYm91dD8gKi9cbiAgICBsaW5lOiBudW1iZXI7XG4gICAgLyoqIHdoaWNoIGNvbHVtbiAqL1xuICAgIGNvbDogbnVtYmVyO1xuICAgIC8qKiBzbywgd2FzIHRoYXQgaW4gc29tZSBvdGhlciBmaWxlPyAqL1xuICAgIGZpbGU6IHN0cmluZztcbiAgICAvKiogbGV0cyB5b3UgZGlzcGxheSBhIGNvZGUgc25pcHBldCBpbnNpZGUgYSBwcmUgdGFnICovXG4gICAgcHJldmlldzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgTGluZU1lc3NhZ2VWaWV3IGV4dGVuZHMgdmlldy5WaWV3PFZpZXdPcHRpb25zPiB7XG5cbiAgICBwdWJsaWMgaW5kZXg6IG51bWJlcjtcbiAgICBwcml2YXRlIHBvc2l0aW9uOiBKUXVlcnk7XG4gICAgcHJpdmF0ZSBjb250ZW50czogSlF1ZXJ5O1xuICAgIHByaXZhdGUgY29kZTogSlF1ZXJ5O1xuICAgIHN0YXRpYyBjb250ZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXYoe1xuICAgICAgICAgICAgY2xhc3M6ICdsaW5lLW1lc3NhZ2UnXG4gICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGl2KHtcbiAgICAgICAgICAgICAgICBjbGFzczogJ3RleHQtc3VidGxlIGlubGluZS1ibG9jaycsXG4gICAgICAgICAgICAgICAgb3V0bGV0OiAncG9zaXRpb24nLFxuICAgICAgICAgICAgICAgIGNsaWNrOiAnZ29Ub0xpbmUnLFxuICAgICAgICAgICAgICAgIHN0eWxlOiAnY3Vyc29yOiBwb2ludGVyOydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5kaXYoe1xuICAgICAgICAgICAgICAgIGNsYXNzOiAnbWVzc2FnZSBpbmxpbmUtYmxvY2snLFxuICAgICAgICAgICAgICAgIG91dGxldDogJ2NvbnRlbnRzJ1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMucHJlKHtcbiAgICAgICAgICAgICAgICBjbGFzczogJ3ByZXZpZXcnLFxuICAgICAgICAgICAgICAgIG91dGxldDogJ2NvZGUnLFxuICAgICAgICAgICAgICAgIGNsaWNrOiAnZ29Ub0xpbmUnLFxuICAgICAgICAgICAgICAgIHN0eWxlOiAnY3Vyc29yOiBwb2ludGVyOydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgICB2YXIgbWVzc2FnZSA9ICdhdCBsaW5lICcgKyB0aGlzLm9wdGlvbnMubGluZTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmZpbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbWVzc2FnZSArPSAnLCBmaWxlICcgKyB0aGlzLm9wdGlvbnMuZmlsZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBvc2l0aW9uLnRleHQobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuY29udGVudHMudGV4dCh0aGlzLm9wdGlvbnMubWVzc2FnZSk7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wcmV2aWV3KSB7XG4gICAgICAgICAgICB0aGlzLmNvZGUudGV4dCh0aGlzLm9wdGlvbnMucHJldmlldyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvZGUucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnb1RvTGluZSgpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmdvVG9MaW5lKHRoaXMub3B0aW9ucy5maWxlLCB0aGlzLm9wdGlvbnMubGluZSwgdGhpcy5vcHRpb25zLmNvbCk7XG4gICAgfVxuXG4gICAgZ2V0U3VtbWFyeSgpIHtcbiAgICAgICAgdmFyIHBvcyA9IHRoaXMub3B0aW9ucy5saW5lLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZmlsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwb3MgKz0gJywgJyArIHRoaXMub3B0aW9ucy5maWxlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdW1tYXJ5OiBwb3MgKyAnICcgKyB0aGlzLm9wdGlvbnMubWVzc2FnZSxcbiAgICAgICAgICAgIHJhd1N1bW1hcnk6IHRydWUsXG4gICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgJChlbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICAuY3NzKCdjdXJzb3InLCAncG9pbnRlcicpXG4gICAgICAgICAgICAgICAgICAgIC5jbGljayh0aGlzLmdvVG9MaW5lLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgIH07XG4gICAgfVxuXG59XG4iXX0=
//# sourceURL=/Users/shannonbertucci/.dotfiles/atom.symlink/packages/atom-typescript/lib/main/atom/views/lineMessageView.ts
