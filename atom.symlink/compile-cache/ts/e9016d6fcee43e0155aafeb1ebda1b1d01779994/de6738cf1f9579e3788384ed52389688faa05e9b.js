// Some docs
// http://www.html5rocks.com/en/tutorials/webcomponents/customelements/ (look at lifecycle callback methods)
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var TsView = (function (_super) {
    __extends(TsView, _super);
    function TsView() {
        _super.apply(this, arguments);
    }
    TsView.prototype.createdCallback = function () {
        var preview = this.innerText;
        this.innerText = "";
        // Based on markdown editor
        // https://github.com/atom/markdown-preview/blob/2bcbadac3980f1aeb455f7078bd1fdfb4e6fe6b1/lib/renderer.coffee#L111
        var editorElement = this.editorElement = document.createElement('atom-text-editor');
        editorElement.setAttributeNode(document.createAttribute('gutter-hidden'));
        editorElement.removeAttribute('tabindex'); // make read-only
        var editor = this.editor = editorElement.getModel();
        editor.getDecorations({ class: 'cursor-line', type: 'line' })[0].destroy(); // remove the default selection of a line in each editor
        editor.setText(preview);
        var grammar = atom.grammars.grammarForScopeName("source.tsx");
        editor.setGrammar(grammar);
        editor.setSoftWrapped(true);
        this.appendChild(editorElement);
    };
    // API
    TsView.prototype.text = function (text) {
        this.editor.setText(text);
    };
    return TsView;
})(HTMLElement);
exports.TsView = TsView;
document.registerElement('ts-view', TsView);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL3NoYW5ub25iZXJ0dWNjaS8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvbGliL21haW4vYXRvbS9jb21wb25lbnRzL3RzVmlldy50cyIsInNvdXJjZXMiOlsiL1VzZXJzL3NoYW5ub25iZXJ0dWNjaS8uYXRvbS9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvbGliL21haW4vYXRvbS9jb21wb25lbnRzL3RzVmlldy50cyJdLCJuYW1lcyI6WyJUc1ZpZXciLCJUc1ZpZXcuY29uc3RydWN0b3IiLCJUc1ZpZXcuY3JlYXRlZENhbGxiYWNrIiwiVHNWaWV3LnRleHQiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7QUFDWiw0R0FBNEc7Ozs7Ozs7QUFFNUcsSUFBYSxNQUFNO0lBQVNBLFVBQWZBLE1BQU1BLFVBQW9CQTtJQUF2Q0EsU0FBYUEsTUFBTUE7UUFBU0MsOEJBQVdBO0lBMEJ2Q0EsQ0FBQ0E7SUF2QkdELGdDQUFlQSxHQUFmQTtRQUNJRSxJQUFJQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQTtRQUM3QkEsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsRUFBRUEsQ0FBQ0E7UUFJcEJBLEFBRkFBLDJCQUEyQkE7UUFDM0JBLGtIQUFrSEE7WUFDOUdBLGFBQWFBLEdBQUdBLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLFFBQVFBLENBQUNBLGFBQWFBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsQ0FBQ0E7UUFDcEZBLGFBQWFBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDMUVBLGFBQWFBLENBQUNBLGVBQWVBLENBQUNBLFVBQVVBLENBQUNBLEVBQUVBLGlCQUFpQkE7UUFDNURBLElBQUlBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLEdBQVNBLGFBQWNBLENBQUNBLFFBQVFBLEVBQUVBLENBQUNBO1FBQzNEQSxNQUFNQSxDQUFDQSxjQUFjQSxDQUFDQSxFQUFFQSxLQUFLQSxFQUFFQSxhQUFhQSxFQUFFQSxJQUFJQSxFQUFFQSxNQUFNQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxPQUFPQSxFQUFFQSxFQUFFQSx3REFBd0RBO1FBQ3BJQSxNQUFNQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUN4QkEsSUFBSUEsT0FBT0EsR0FBU0EsSUFBS0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFBQTtRQUNwRUEsTUFBTUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7UUFDM0JBLE1BQU1BLENBQUNBLGNBQWNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBRTVCQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQTtJQUNwQ0EsQ0FBQ0E7SUFFREYsTUFBTUE7SUFDTkEscUJBQUlBLEdBQUpBLFVBQUtBLElBQVlBO1FBQ2JHLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLENBQUNBO0lBQzlCQSxDQUFDQTtJQUNMSCxhQUFDQTtBQUFEQSxDQUFDQSxBQTFCRCxFQUE0QixXQUFXLEVBMEJ0QztBQTFCWSxjQUFNLEdBQU4sTUEwQlosQ0FBQTtBQUVLLFFBQVMsQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU29tZSBkb2NzXG4vLyBodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy93ZWJjb21wb25lbnRzL2N1c3RvbWVsZW1lbnRzLyAobG9vayBhdCBsaWZlY3ljbGUgY2FsbGJhY2sgbWV0aG9kcylcblxuZXhwb3J0IGNsYXNzIFRzVmlldyBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICBlZGl0b3JFbGVtZW50OiBIVE1MRWxlbWVudFxuICAgIGVkaXRvcjogQXRvbUNvcmUuSUVkaXRvclxuICAgIGNyZWF0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdmFyIHByZXZpZXcgPSB0aGlzLmlubmVyVGV4dDtcbiAgICAgICAgdGhpcy5pbm5lclRleHQgPSBcIlwiO1xuXG4gICAgICAgIC8vIEJhc2VkIG9uIG1hcmtkb3duIGVkaXRvclxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYXRvbS9tYXJrZG93bi1wcmV2aWV3L2Jsb2IvMmJjYmFkYWMzOTgwZjFhZWI0NTVmNzA3OGJkMWZkZmI0ZTZmZTZiMS9saWIvcmVuZGVyZXIuY29mZmVlI0wxMTFcbiAgICAgICAgdmFyIGVkaXRvckVsZW1lbnQgPSB0aGlzLmVkaXRvckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhdG9tLXRleHQtZWRpdG9yJyk7XG4gICAgICAgIGVkaXRvckVsZW1lbnQuc2V0QXR0cmlidXRlTm9kZShkb2N1bWVudC5jcmVhdGVBdHRyaWJ1dGUoJ2d1dHRlci1oaWRkZW4nKSk7XG4gICAgICAgIGVkaXRvckVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCd0YWJpbmRleCcpOyAvLyBtYWtlIHJlYWQtb25seVxuICAgICAgICB2YXIgZWRpdG9yID0gdGhpcy5lZGl0b3IgPSAoPGFueT5lZGl0b3JFbGVtZW50KS5nZXRNb2RlbCgpO1xuICAgICAgICBlZGl0b3IuZ2V0RGVjb3JhdGlvbnMoeyBjbGFzczogJ2N1cnNvci1saW5lJywgdHlwZTogJ2xpbmUnIH0pWzBdLmRlc3Ryb3koKTsgLy8gcmVtb3ZlIHRoZSBkZWZhdWx0IHNlbGVjdGlvbiBvZiBhIGxpbmUgaW4gZWFjaCBlZGl0b3JcbiAgICAgICAgZWRpdG9yLnNldFRleHQocHJldmlldyk7XG4gICAgICAgIHZhciBncmFtbWFyID0gKDxhbnk+YXRvbSkuZ3JhbW1hcnMuZ3JhbW1hckZvclNjb3BlTmFtZShcInNvdXJjZS50c3hcIilcbiAgICAgICAgZWRpdG9yLnNldEdyYW1tYXIoZ3JhbW1hcik7XG4gICAgICAgIGVkaXRvci5zZXRTb2Z0V3JhcHBlZCh0cnVlKTtcblxuICAgICAgICB0aGlzLmFwcGVuZENoaWxkKGVkaXRvckVsZW1lbnQpO1xuICAgIH1cblxuICAgIC8vIEFQSVxuICAgIHRleHQodGV4dDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuZWRpdG9yLnNldFRleHQodGV4dCk7XG4gICAgfVxufVxuXG4oPGFueT5kb2N1bWVudCkucmVnaXN0ZXJFbGVtZW50KCd0cy12aWV3JywgVHNWaWV3KTtcbiJdfQ==